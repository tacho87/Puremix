<layout>main</layout>

<head>
  <title>Template Engine Test Suite - PureMix Framework</title>
  <meta name="description" content="Comprehensive test of PureMix template engine with HTML-only processing">
</head>

<loader>
  async function loadTemplateTest(request, actionResult) {
    if (actionResult?.success) {
      return {
        data: {
          title: "Template Engine Test - Updated",
          user: { 
            id: actionResult.userId || 1,
            name: actionResult.userName || "Updated User", 
            age: 28, 
            isActive: true,
            role: "admin",
            email: "updated@example.com",
            avatar: "/avatars/updated.jpg",
            balance: 1250.75,
            joinDate: new Date('2023-01-15')
          },
          products: [
            { id: 1, name: "Updated Laptop", price: 1299.99, inStock: true, category: "Electronics", rating: 4.8, createdAt: new Date('2024-01-01') },
            { id: 2, name: "Wireless Mouse", price: 79.99, inStock: false, category: "Accessories", rating: 4.2, createdAt: new Date('2024-02-15') },
            { id: 3, name: "Mechanical Keyboard", price: 159.99, inStock: true, category: "Accessories", rating: 4.9, createdAt: new Date('2024-03-01') },
            { id: 4, name: "Monitor", price: 299.99, inStock: true, category: "Electronics", rating: 4.5, createdAt: new Date('2024-01-20') }
          ],
          stats: { total: 250, active: 200, pending: 30, inactive: 20 },
          notifications: [
            { id: 1, message: "New order received", type: "success", timestamp: "2 min ago" },
            { id: 2, message: "Payment processed", type: "info", timestamp: "5 min ago" },
            { id: 3, message: "User registered", type: "success", timestamp: "10 min ago" }
          ],
          message: actionResult.message
        },
        state: { 
          showSuccess: true,
          showAdvanced: true,
          showProducts: true,
          showNotifications: true,
          loading: false,
          expandedSection: actionResult.section || 'all'
        }
      };
    }
    
    return {
      data: {
        title: "Template Engine Test Suite",
        user: { 
          id: 1,
          name: "John Doe", 
          age: 30, 
          isActive: true, 
          role: "user",
          email: "john@example.com",
          avatar: "/avatars/john.jpg",
          balance: 999.50,
          joinDate: new Date('2023-06-15')
        },
        products: [
          { id: 1, name: "Laptop", price: 999.99, inStock: true, category: "Electronics", rating: 4.5, createdAt: new Date('2024-01-01') },
          { id: 2, name: "Mouse", price: 29.99, inStock: false, category: "Accessories", rating: 4.0, createdAt: new Date('2024-02-01') },
          { id: 3, name: "Keyboard", price: 129.99, inStock: true, category: "Accessories", rating: 4.7, createdAt: new Date('2024-02-15') },
          { id: 4, name: "Monitor", price: 249.99, inStock: true, category: "Electronics", rating: 4.3, createdAt: new Date('2024-01-10') }
        ],
        stats: { total: 200, active: 150, pending: 25, inactive: 25 },
        notifications: [
          { id: 1, message: "Welcome to the system", type: "info", timestamp: "1 hour ago" },
          { id: 2, message: "Profile updated", type: "success", timestamp: "2 hours ago" }
        ]
      },
      state: { 
        showSuccess: false,
        showAdvanced: true,
        showProducts: true,
        showNotifications: false,
        loading: false,
        expandedSection: 'all'
      }
    };
  }
</loader>

<div class="template-test">
  <h1>{loadTemplateTest.data.title}</h1>
  
  <!-- Basic Template Engine Tests -->
  <div class="test-section basic-section">
    <h2>üî§ Basic Template Processing (HTML-Only)</h2>
    
    <div class="test-case">
      <h3>Simple Data Binding</h3>
      <div class="result" id="basic-binding">
        <p>User Name: <strong>{loadTemplateTest.data.user.name}</strong></p>
        <p>User Age: <strong>{loadTemplateTest.data.user.age}</strong></p>
        <p>User Email: <strong>{loadTemplateTest.data.user.email}</strong></p>
        <p>Account Balance: <strong>${loadTemplateTest.data.user.balance}</strong></p>
      </div>
    </div>
    
    <div class="test-case">
      <h3>HTML Element Conditionals (PROCESSED)</h3>
      <div class="result" id="html-conditionals">
        {loadTemplateTest.data.user.isActive ? <div class="user-active">
            <h4>‚úÖ Active User: {loadTemplateTest.data.user.name}</h4>
            <p>Role: <span class="role-badge">{loadTemplateTest.data.user.role}</span></p>
            <p>Age Group: {loadTemplateTest.data.user.age >= 30 ? <span class="senior">Senior (30+)</span> : <span class="junior">Junior (&lt;30)</span>}</p>
          </div> : <div class="user-inactive">
            <p>‚ùå User {loadTemplateTest.data.user.name} is currently inactive</p>
          </div>
        }
      </div>
    </div>
    
    <div class="test-case">
      <h3>String Literals (IGNORED - Passed to Client)</h3>
      <div class="result" id="string-literals">
        <p>These expressions are ignored by server:</p>
        <ul>
          <li>String literal: {'This is ignored by server'}</li>
          <li>Template literal: {`This ${loadTemplateTest.data.user.name} is also ignored`}</li>
          <li>Mixed: {loadTemplateTest.data.user.isActive ? 'Active user string' : "Inactive user string"}</li>
        </ul>
        <p class="note">‚òùÔ∏è The expressions above are passed unchanged to the browser</p>
      </div>
    </div>
  </div>

  <!-- Array Operations -->
  <div class="test-section array-section">
    <h2>üîÑ Array Operations with HTML Elements</h2>
    
    <div class="test-case">
      <h3>Product List with HTML Elements</h3>
      <div class="result" id="product-list">
        <h4>Products ({loadTemplateTest.data.products.length} items):</h4>
        <div class="products-grid">
          {loadTemplateTest.data.products.map(product => 
            <div class="product-card">
              <h5>{product.name}</h5>
              <p class="price">${product.price}</p>
              <p class="status">{product.inStock ? <span class="in-stock">‚úÖ In Stock</span> : <span class="out-of-stock">‚ùå Out of Stock</span>}</p>
              <p class="category">Category: {product.category}</p>
              <p class="rating">‚≠ê {product.rating}/5</p>
            </div>
          )}
        </div>
      </div>
    </div>
    
    <div class="test-case">
      <h3>Filtered Array with Nested Conditionals</h3>
      <div class="result" id="filtered-products">
        <h4>Available Products Only:</h4>
        {loadTemplateTest.data.products
          .filter(product => product.inStock)
          .map(product => 
            <div class="available-product">
              <span class="name">{product.name}</span>
              <span class="price">${product.price}</span>
              <span class="category">({product.category})</span>
              {product.rating >= 4.5 ? <span class="high-rated">‚≠ê Highly Rated</span> : <span></span>}
            </div>
          )}
      </div>
    </div>
    
    <div class="test-case">
      <h3>Complex Nested Loops and Conditionals</h3>
      <div class="result" id="complex-nesting">
        {loadTemplateTest.data.user.role === 'admin' ? 
          <div class="admin-view">
            <h4>Admin Dashboard for {loadTemplateTest.data.user.name}</h4>
            <div class="categories">
              {['Electronics', 'Accessories'].map(category => 
                <div class="category-section">
                  <h5>Category: {category}</h5>
                  {loadTemplateTest.data.products
                    .filter(p => p.category === category)
                    .map(product => 
                      <div class="admin-product">
                        <span>{product.name}</span>
                        <span>${product.price}</span>
                        {product.inStock ? <span class="stock-yes">üì¶ Stocked</span> : <span class="stock-no">üìã Order</span>}
                      </div>
                    )}
                </div>
              )}
            </div>
          </div> : <div class="user-view">
            <h4>Welcome, {loadTemplateTest.data.user.name}!</h4>
            <p>You can view {loadTemplateTest.data.products.filter(p => p.inStock).length} available products.</p>
          </div>
        }
      </div>
    </div>
  </div>

  <!-- Method-Style Filters Test -->
  <div class="test-section filters-section">
    <h2>üîß Method-Style Filters Test</h2>
    
    <div class="test-case">
      <h3>String Method Filters</h3>
      <div class="result" id="string-methods">
        <p>Original: <code>{loadTemplateTest.data.user.name}</code></p>
        <p>Uppercase: <strong>{loadTemplateTest.data.user.name.toUpperCase()}</strong></p>
        <p>Lowercase: <strong>{loadTemplateTest.data.user.email.toLowerCase()}</strong></p>
        <p>First Char: <strong>{loadTemplateTest.data.user.name.charAt(0)}</strong></p>
        <p>Length: <strong>{loadTemplateTest.data.user.name.length}</strong></p>
        <p>Substring: <strong>{loadTemplateTest.data.user.name.substring(0, 3)}</strong></p>
      </div>
    </div>
    
    <div class="test-case">
      <h3>Number Method Filters</h3>
      <div class="result" id="number-methods">
        <p>Original Balance: <code>{loadTemplateTest.data.user.balance}</code></p>
        <p>Fixed 2 decimals: <strong>${loadTemplateTest.data.user.balance.toFixed(2)}</strong></p>
        <p>Rounded: <strong>${Math.round(loadTemplateTest.data.user.balance)}</strong></p>
        <p>As String: <strong>"{loadTemplateTest.data.user.balance.toString()}"</strong></p>
      </div>
    </div>
    
    <div class="test-case">
      <h3>Date Method Filters</h3>
      <div class="result" id="date-methods">
        <p>Join Date: <code>{loadTemplateTest.data.user.joinDate}</code></p>
        <p>Year: <strong>{loadTemplateTest.data.user.joinDate.getFullYear()}</strong></p>
        <p>Month: <strong>{loadTemplateTest.data.user.joinDate.getMonth() + 1}</strong></p>
        <p>ISO String: <strong>{loadTemplateTest.data.user.joinDate.toISOString()}</strong></p>
        <p>Date String: <strong>{loadTemplateTest.data.user.joinDate.toDateString()}</strong></p>
      </div>
    </div>
  </div>

  <!-- Action Testing -->
  <div class="test-section actions-section">
    <h2>‚ö° Form Actions and State Updates</h2>
    
    <form method="POST" class="test-actions">
      <div class="form-group">
        <label>User Name:</label>
        <input type="text" name="userName" value="{loadTemplateTest.data.user.name}" required>
      </div>
      
      <div class="form-group">
        <label>User ID:</label>
        <input type="number" name="userId" value="{loadTemplateTest.data.user.id}" required>
      </div>
      
      <div class="form-group">
        <label>Update Message:</label>
        <input type="text" name="message" placeholder="Enter update message..." required>
      </div>
      
      <div class="form-group">
        <label>View Section:</label>
        <select name="section">
          <option value="all">All Sections</option>
          <option value="profile">Profile Only</option>
          <option value="products">Products Only</option>
        </select>
      </div>
      
      <button type="submit" name="_action" value="updateTemplateTest">üîÑ Update Template Data</button>
    </form>
    
    {loadTemplateTest.state.showSuccess ? <div class="success-response">
        <h4>‚úÖ Update Successful!</h4>
        <p>{loadTemplateTest.data.message}</p>
        <small>Updated user: {loadTemplateTest.data.user.name} (ID #{loadTemplateTest.data.user.id})</small>
      </div> : <span>x</span>}
  </div>

  <!-- AJAX Testing -->
  <div class="test-section ajax-section">
    <h2>‚ö° AJAX Server Function Calls</h2>
    
    <div class="ajax-controls">
      <input type="text" id="ajaxUserName" placeholder="Enter name for AJAX test" value="Test User">
      <button onclick="testTemplateAjax()" class="btn-primary">Test AJAX Template Update</button>
      <button onclick="testMultipleAjax()" class="btn-secondary">Test Multiple AJAX Calls</button>
    </div>
    
    <div id="ajaxResults" class="ajax-results" style="display: none;">
      <h4>AJAX Response:</h4>
      <pre id="ajaxOutput"></pre>
    </div>
  </div>

  <!-- Client-Side Template Demo -->
  <div class="test-section client-section">
    <h2>üñ•Ô∏è Client-Side vs Server-Side</h2>
    
    <div class="comparison-grid">
      <div class="server-side">
        <h3>Server-Side Processing (HTML Elements)</h3>
        <div class="demo-content">
          <p>User: {loadTemplateTest.data.user.name}</p>
          <p>Active: {loadTemplateTest.data.user.isActive ? <span class="yes">Yes</span> : <span class="no">No</span>}</p>
          <p>Product Count: {loadTemplateTest.data.products.length}</p>
          <div class="mini-products">
            {loadTemplateTest.data.products.slice(0, 2).map(p => 
              <div class="mini-product">{p.name} - ${p.price}</div>
            )}
          </div>
        </div>
      </div>
      
      <div class="client-side">
        <h3>Client-Side Processing (String Literals)</h3>
        <div id="clientSideDemo" class="demo-content">
          <p>Loading client-side template demo...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Security Demo -->
  <div class="test-section security-section">
    <h2>üîí Template Security Demonstration</h2>
    
    <div class="security-demo">
      <h3>Safe Template Processing</h3>
      <div class="security-examples">
        <div class="example">
          <h4>‚úÖ Safe: HTML Elements (Processed)</h4>
          <code>{`condition ? <div>Safe HTML</div> : <span>Alternative</span>`}</code>
          <div class="demo-result">
            {loadTemplateTest.data.user.isActive ? <div class="safe-html">‚úÖ Safe HTML processed by server</div> : <span class="alternative">Alternative content</span>}
          </div>
        </div>
        
        <div class="example">
          <h4>üîí Safe: String Literals (Ignored by Server)</h4>
          <code>{`condition ? 'string literal' : "another string"`}</code>
          <div class="demo-result">
            <p>Server ignores: {loadTemplateTest.data.user.isActive ? 'Active user string' : "Inactive user string"}</p>
            <p class="note">‚òùÔ∏è String literals are passed unchanged to browser</p>
          </div>
        </div>
        
        <div class="example">
          <h4>üõ°Ô∏è Safe: Template Literals (Ignored by Server)</h4>
          <code>{`condition ? \`template ${variable}\` : \`other ${template}\``}</code>
          <div class="demo-result">
            <p>Server ignores: {loadTemplateTest.data.user.isActive ? `Template with ${loadTemplateTest.data.user.name}` : `Alternative template`}</p>
            <p class="note">‚òùÔ∏è Template literals are completely ignored by server</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script server>
  async function updateTemplateTest(formData, request) {
    const { userName, userId, message, section } = formData;
    
    // Validate input
    if (!userName || !userId || !message) {
      return {
        error: 'All fields are required',
        success: false
      };
    }
    
    // Simulate processing delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return {
      success: true,
      userName: userName,
      userId: parseInt(userId),
      message: message,
      section: section || "all"
    };
  }
  
  async function ajaxTemplateUpdate(formData, request) {
    const { userName } = formData;
    
    return {
      success: true,
      data: {
        serverProcessed: `Server processed: ${userName}`,
        timestamp: new Date().toISOString(),
        randomNumber: Math.floor(Math.random() * 1000)
      },
      message: `AJAX call successful for ${userName}`
    };
  }
  
  async function getTemplateData(formData, request) {
    return {
      success: true,
      templateInfo: {
        processed: "HTML elements in {} expressions",
        ignored: "String literals and template literals",
        security: "Safe by design - no code execution",
        examples: [
          "Processed: {condition ? <div>HTML</div> : <span>Alt</span>}",
          "Ignored: {condition ? 'string' : `template`}"
        ]
      }
    };
  }
</script>

<script>
  // Client-side JavaScript (passed through by framework)
  
  async function testTemplateAjax() {
    const userName = document.getElementById('ajaxUserName').value;
    const resultsDiv = document.getElementById('ajaxResults');
    const outputPre = document.getElementById('ajaxOutput');
    
    try {
      const response = await PureMix.call('ajaxTemplateUpdate', { userName });
      
      outputPre.textContent = JSON.stringify(response, null, 2);
      resultsDiv.style.display = 'block';
      
      console.log('AJAX response:', response);
    } catch (error) {
      outputPre.textContent = 'Error: ' + error.message;
      resultsDiv.style.display = 'block';
      console.error('AJAX failed:', error);
    }
  }
  
  async function testMultipleAjax() {
    const resultsDiv = document.getElementById('ajaxResults');
    const outputPre = document.getElementById('ajaxOutput');
    
    try {
      const promises = [
        PureMix.call('getTemplateData', {}),
        PureMix.call('ajaxTemplateUpdate', { userName: 'Batch User 1' }),
        PureMix.call('ajaxTemplateUpdate', { userName: 'Batch User 2' })
      ];
      
      const results = await Promise.all(promises);
      
      outputPre.textContent = 'Multiple AJAX Results:\n' + JSON.stringify(results, null, 2);
      resultsDiv.style.display = 'block';
      
      console.log('Multiple AJAX results:', results);
    } catch (error) {
      outputPre.textContent = 'Multiple AJAX Error: ' + error.message;
      resultsDiv.style.display = 'block';
      console.error('Multiple AJAX failed:', error);
    }
  }
  
  // Demonstrate client-side template processing
  document.addEventListener('DOMContentLoaded', () => {
    const clientDemo = document.getElementById('clientSideDemo');
    const userName = 'Client User';
    const timestamp = new Date().toLocaleTimeString();
    const randomNum = Math.floor(Math.random() * 100);
    
    // This uses template literals on the client-side (normal JavaScript)
    clientDemo.innerHTML = `
      <p>Client Name: <strong>${userName}</strong></p>
      <p>Generated at: <strong>${timestamp}</strong></p>
      <p>Random Number: <strong>${randomNum}</strong></p>
      <p>Window Width: <strong>${window.innerWidth}px</strong></p>
      <p class="note">‚òùÔ∏è This content was generated client-side using \$\{\} template literals</p>
    `;
  });
</script>

<style>
  .template-test {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  }
  
  .test-section {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 25px;
    margin: 25px 0;
    border-left: 4px solid #007bff;
  }
  
  .basic-section { border-left-color: #28a745; }
  .array-section { border-left-color: #dc3545; }
  .filters-section { border-left-color: #6f42c1; }
  .actions-section { border-left-color: #fd7e14; }
  .ajax-section { border-left-color: #17a2b8; }
  .client-section { border-left-color: #ffc107; }
  .security-section { border-left-color: #20c997; }
  
  .test-section h2 {
    margin: 0 0 20px 0;
    padding-bottom: 10px;
    border-bottom: 2px solid #dee2e6;
    font-size: 1.5rem;
  }
  
  .test-case {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin: 15px 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .test-case h3 {
    color: #495057;
    margin: 0 0 15px 0;
    font-size: 1.1rem;
  }
  
  .result {
    background: #f8f9fa;
    border: 2px solid #007bff;
    border-radius: 6px;
    padding: 15px;
    min-height: 40px;
  }
  
  .user-active, .user-inactive {
    padding: 15px;
    border-radius: 6px;
    margin: 10px 0;
  }
  
  .user-active {
    background: #d4edda;
    border-left: 4px solid #28a745;
  }
  
  .user-inactive {
    background: #f8d7da;
    border-left: 4px solid #dc3545;
  }
  
  .role-badge {
    background: #007bff;
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
  }
  
  .senior {
    background: #6f42c1;
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
  }
  
  .junior {
    background: #17a2b8;
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
  }
  
  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-top: 15px;
  }
  
  .product-card {
    background: #fff;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .product-card h5 {
    margin: 0 0 10px 0;
    color: #495057;
  }
  
  .price {
    font-size: 1.2rem;
    font-weight: bold;
    color: #007bff;
    margin: 5px 0;
  }
  
  .in-stock {
    color: #28a745;
    font-weight: 500;
  }
  
  .out-of-stock {
    color: #dc3545;
    font-weight: 500;
  }
  
  .available-product {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px;
    margin: 5px 0;
    background: #e7f3ff;
    border-radius: 4px;
  }
  
  .high-rated {
    background: #ffc107;
    color: #212529;
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 0.7rem;
  }
  
  .admin-view {
    background: #e7f3ff;
    padding: 20px;
    border-radius: 8px;
    border-left: 4px solid #007bff;
  }
  
  .category-section {
    margin: 15px 0;
    padding: 15px;
    background: rgba(255,255,255,0.7);
    border-radius: 6px;
  }
  
  .admin-product {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 5px;
    margin: 3px 0;
    background: white;
    border-radius: 3px;
    font-size: 0.9rem;
  }
  
  .stock-yes {
    color: #28a745;
    font-size: 0.8rem;
  }
  
  .stock-no {
    color: #dc3545;
    font-size: 0.8rem;
  }
  
  .user-view {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    border-left: 4px solid #6c757d;
  }
  
  .test-actions {
    background: white;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .form-group {
    margin: 15px 0;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #495057;
  }
  
  .form-group input,
  .form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 16px;
  }
  
  button {
    background: #007bff;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.2s;
    margin: 5px;
  }
  
  button:hover {
    background: #0056b3;
  }
  
  .btn-primary {
    background: #007bff;
  }
  
  .btn-primary:hover {
    background: #0056b3;
  }
  
  .btn-secondary {
    background: #6c757d;
  }
  
  .btn-secondary:hover {
    background: #545b62;
  }
  
  .success-response {
    background: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
    padding: 15px;
    border-radius: 6px;
    margin-top: 15px;
  }
  
  .ajax-controls {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .ajax-controls input {
    flex: 1;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  .ajax-results {
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 6px;
    padding: 15px;
    margin-top: 15px;
  }
  
  .ajax-results pre {
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
    overflow-x: auto;
    font-size: 12px;
    margin: 10px 0 0 0;
  }
  
  .comparison-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 20px;
  }
  
  .server-side, .client-side {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .server-side h3 {
    color: #28a745;
  }
  
  .client-side h3 {
    color: #ffc107;
  }
  
  .demo-content {
    background: #f8f9fa;
    border-radius: 6px;
    padding: 15px;
    margin-top: 10px;
  }
  
  .mini-product {
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 8px;
    margin: 5px 0;
    font-size: 0.9rem;
  }
  
  .security-examples {
    margin-top: 20px;
  }
  
  .example {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin: 15px 0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .example h4 {
    margin: 0 0 10px 0;
    color: #495057;
  }
  
  .example code {
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 10px;
    display: block;
    font-family: Monaco, monospace;
    font-size: 0.85rem;
    margin: 10px 0;
    overflow-x: auto;
  }
  
  .demo-result {
    background: #e7f3ff;
    border-left: 4px solid #007bff;
    padding: 15px;
    border-radius: 6px;
  }
  
  .safe-html {
    background: #d4edda;
    color: #155724;
    padding: 8px;
    border-radius: 4px;
    border-left: 3px solid #28a745;
  }
  
  .alternative {
    background: #fff3cd;
    color: #856404;
    padding: 8px;
    border-radius: 4px;
    border-left: 3px solid #ffc107;
  }
  
  .note {
    font-style: italic;
    color: #6c757d;
    font-size: 0.9rem;
    margin-top: 10px;
  }
  
  .yes {
    color: #28a745;
    font-weight: bold;
  }
  
  .no {
    color: #dc3545;
    font-weight: bold;
  }
  
  @media (max-width: 768px) {
    .template-test {
      padding: 10px;
    }
    
    .test-section {
      padding: 15px;
      margin: 15px 0;
    }
    
    .comparison-grid {
      grid-template-columns: 1fr;
    }
    
    .products-grid {
      grid-template-columns: 1fr;
    }
    
    .ajax-controls {
      flex-direction: column;
      align-items: stretch;
    }
  }
</style>
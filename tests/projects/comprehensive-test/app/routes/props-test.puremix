<layout>main</layout>

<imports>
  import PropsTestCard from '../components/PropsTestCard.puremix'
</imports>

<head>
  <title>Props Support Test - PureMix Framework</title>
  <meta name="description" content="Testing the new component props functionality">
</head>

<loader>
  async function loadPropsTest(request, actionResult) {
    // Sample data to pass as props
    const users = [
      {
        name: 'Alice Johnson',
        email: 'alice@example.com',
        role: 'admin',
        department: 'Engineering'
      },
      {
        name: 'Bob Smith', 
        email: 'bob@example.com',
        role: 'user',
        department: 'Design'
      },
      {
        name: 'Charlie Davis',
        email: 'charlie@example.com',
        role: 'moderator',
        department: 'Support'
      }
    ];

    const configs = [
      {
        showEmail: true,
        theme: 'light',
        actions: ['view', 'edit', 'delete']
      },
      {
        showEmail: false,
        theme: 'dark', 
        actions: ['view']
      },
      {
        showEmail: true,
        theme: 'light',
        actions: ['view', 'edit']
      }
    ];

    const testCases = [
      {
        title: 'Full Props Example',
        user: users[0],
        config: configs[0],
        priority: 'high',
        metadata: {
          source: 'api',
          lastSync: '2025-09-05T12:30:00Z',
          version: '1.2.3'
        }
      },
      {
        title: 'Minimal Props Example', 
        user: users[1],
        config: configs[1],
        priority: 'medium'
      },
      {
        title: 'Object Literal Props',
        user: users[2],
        config: configs[2],
        priority: 'normal',
        metadata: {
          tags: ['vip', 'customer'],
          score: 95
        }
      }
    ];

    return {
      data: { 
        testCases,
        pageTitle: 'Component Props Testing Suite',
        description: 'Demonstrating component props support in PureMix framework'
      },
      state: { 
        showExamples: true,
        testMode: true
      }
    };
  }
</loader>

<div class="props-test-container">
  <header class="test-header">
    <h1>ðŸŽ¯ {loadPropsTest.data.pageTitle}</h1>
    <p class="subtitle">{loadPropsTest.data.description}</p>
    
    <div class="feature-highlight">
      <h2>ðŸŽ‰ NEW: Component Props Support!</h2>
      <p>Components can now receive data through props, just like React components:</p>
      <code class="syntax-example">&lt;PropsTestCard user={userData} config={settings} /&gt;</code>
    </div>
  </header>

  <!-- Test Cases Section -->
  <section class="test-cases">
    <h2>ðŸ“‹ Test Cases</h2>
    
    <!-- Test Case 1: Full Props -->
    <div class="test-case">
      <h3>1. Full Props Example</h3>
      <p>Passing user object, config object, priority string, and metadata object:</p>
      <div class="code-example">
        <code>&lt;PropsTestCard user={loadPropsTest.data.testCases[0].user} config={loadPropsTest.data.testCases[0].config} priority="{loadPropsTest.data.testCases[0].priority}" metadata={loadPropsTest.data.testCases[0].metadata} /&gt;</code>
      </div>
      <div class="component-demo">
        <PropsTestCard 
          user={loadPropsTest.data.testCases[0].user} 
          config={loadPropsTest.data.testCases[0].config} 
          priority={loadPropsTest.data.testCases[0].priority}
          metadata={loadPropsTest.data.testCases[0].metadata}
        />
      </div>
    </div>

    <!-- Test Case 2: Minimal Props -->
    <div class="test-case">
      <h3>2. Minimal Props Example</h3>
      <p>Passing only essential props (user, config, priority):</p>
      <div class="code-example">
        <code>&lt;PropsTestCard user={loadPropsTest.data.testCases[1].user} config={loadPropsTest.data.testCases[1].config} priority="{loadPropsTest.data.testCases[1].priority}" /&gt;</code>
      </div>
      <div class="component-demo">
        <PropsTestCard 
          user={loadPropsTest.data.testCases[1].user} 
          config={loadPropsTest.data.testCases[1].config} 
          priority={loadPropsTest.data.testCases[1].priority}
        />
      </div>
    </div>

    <!-- Test Case 3: Object Literal Props -->
    <div class="test-case">
      <h3>3. Object Literal Props Example</h3>
      <p>Using object literal syntax for props:</p>
      <div class="code-example">
        <code>&lt;PropsTestCard user={{name: "Direct User", email: "direct@example.com", role: "guest"}} config={{showEmail: true, theme: "light", actions: ["view"]}} priority="low" /&gt;</code>
      </div>
      <div class="component-demo">
        <PropsTestCard 
          user={{name: "Direct User", email: "direct@example.com", role: "guest"}} 
          config={{showEmail: true, theme: "light", actions: ["view"]}} 
          priority="low"
        />
      </div>
    </div>

    <!-- Test Case 4: No Props (Backward Compatibility) -->
    <div class="test-case">
      <h3>4. No Props (Backward Compatibility)</h3>
      <p>Component without props should use defaults:</p>
      <div class="code-example">
        <code>&lt;PropsTestCard /&gt;</code>
      </div>
      <div class="component-demo">
        <PropsTestCard />
      </div>
    </div>
  </section>

  <!-- Props Documentation Section -->
  <section class="props-documentation">
    <h2>ðŸ“š Props Support Documentation</h2>
    
    <div class="doc-section">
      <h3>Component Loader Signature</h3>
      <p>Component loaders now support a third parameter for props:</p>
      <pre class="code-block"><code>async function loadComponentName(request, actionResult, props) {
  // Props parameter contains all passed props
  console.log('Props received:', props);
  
  // Use props data or fallback to defaults
  const user = props?.user || defaultUser;
  const config = props?.config || defaultConfig;
  
  return {
    data: { user, config },
    state: { ... }
  };
}</code></pre>
    </div>

    <div class="doc-section">
      <h3>Supported Props Syntax</h3>
      <div class="syntax-examples">
        <div class="syntax-item">
          <h4>String Props</h4>
          <code>&lt;Component title="Hello World" priority="high" /&gt;</code>
        </div>
        
        <div class="syntax-item">
          <h4>Expression Props</h4>
          <code>&lt;Component user={loadPage.data.user} count={items.length} /&gt;</code>
        </div>
        
        <div class="syntax-item">
          <h4>Object Literal Props</h4>
          <code>&lt;Component config={{theme: "dark", showEmail: true}} /&gt;</code>
        </div>
        
        <div class="syntax-item">
          <h4>Mixed Props</h4>
          <code>&lt;Component user={userData} priority="high" config={{theme: "light"}} /&gt;</code>
        </div>
      </div>
    </div>

    <div class="doc-section">
      <h3>Backward Compatibility</h3>
      <p>âœ… All existing components continue to work unchanged</p>
      <p>âœ… Props parameter defaults to <code>null</code> if not provided</p>
      <p>âœ… Components can gracefully handle missing props</p>
    </div>
  </section>
</div>

<style>
  .props-test-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  }

  .test-header {
    text-align: center;
    margin-bottom: 40px;
  }

  .test-header h1 {
    color: #1f2937;
    font-size: 2.5rem;
    margin-bottom: 10px;
  }

  .subtitle {
    color: #6b7280;
    font-size: 1.1rem;
    margin-bottom: 30px;
  }

  .feature-highlight {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 16px;
    margin-bottom: 40px;
  }

  .feature-highlight h2 {
    margin: 0 0 10px 0;
    font-size: 1.5rem;
  }

  .feature-highlight p {
    margin-bottom: 15px;
    opacity: 0.9;
  }

  .syntax-example {
    background: rgba(255, 255, 255, 0.2);
    padding: 10px 15px;
    border-radius: 8px;
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
    backdrop-filter: blur(10px);
  }

  .test-cases {
    margin-bottom: 50px;
  }

  .test-cases h2 {
    color: #1f2937;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 10px;
    margin-bottom: 30px;
  }

  .test-case {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 25px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .test-case h3 {
    color: #374151;
    margin: 0 0 10px 0;
    font-size: 1.3rem;
  }

  .test-case p {
    color: #6b7280;
    margin-bottom: 15px;
  }

  .code-example {
    background: #f3f4f6;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    overflow-x: auto;
  }

  .code-example code {
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
    font-size: 0.9rem;
    color: #374151;
    word-wrap: break-word;
  }

  .component-demo {
    border: 2px dashed #d1d5db;
    border-radius: 8px;
    padding: 20px;
    background: #f9fafb;
  }

  .props-documentation {
    background: white;
    border-radius: 16px;
    padding: 30px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
  }

  .props-documentation h2 {
    color: #1f2937;
    margin: 0 0 25px 0;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 10px;
  }

  .doc-section {
    margin-bottom: 30px;
  }

  .doc-section h3 {
    color: #374151;
    margin: 0 0 15px 0;
  }

  .doc-section p {
    color: #6b7280;
    line-height: 1.6;
    margin-bottom: 15px;
  }

  .code-block {
    background: #1f2937;
    color: #f9fafb;
    padding: 20px;
    border-radius: 8px;
    overflow-x: auto;
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
    font-size: 0.9rem;
    line-height: 1.5;
  }

  .syntax-examples {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
  }

  .syntax-item {
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 15px;
  }

  .syntax-item h4 {
    color: #374151;
    margin: 0 0 10px 0;
    font-size: 1rem;
  }

  .syntax-item code {
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
    font-size: 0.8rem;
    color: #6366f1;
    word-wrap: break-word;
  }
</style>
<layout>main</layout>

<imports>
  import UserCard from '../components/UserCard'
</imports>

<loader>
  async function loadComponentEdgeCases(request) {
    return {
      data: {
        title: "Component System Edge Case Testing",
        
        // Normal user data
        normalUsers: [
          { id: 1, name: "Alice Johnson", email: "alice@example.com", isActive: true },
          { id: 2, name: "Bob Smith", email: "bob@example.com", isActive: false },
          { id: 3, name: "Carol Davis", email: "carol@example.com", isActive: true }
        ],
        
        // Edge case user data
        edgeCaseUsers: [
          // Empty user
          {},
          
          // Null values
          { id: null, name: null, email: null, isActive: null },
          
          // Undefined values
          { id: undefined, name: undefined, email: undefined, isActive: undefined },
          
          // Extreme values
          { 
            id: 999999999,
            name: "Very Long Name That Exceeds Normal Expectations And Might Cause Display Issues In Components",
            email: "extremely.long.email.address.that.might.cause.layout.problems@very-long-domain-name-example.com",
            isActive: "not-a-boolean"
          },
          
          // Special characters
          {
            id: "string-id",
            name: "Test <script>alert('xss')</script> User",
            email: "test+special@domain.co.uk",
            isActive: 1
          },
          
          // Unicode and emoji
          {
            id: 5,
            name: "ÊµãËØïÁî®Êà∑ üöÄ Test User",
            email: "unicode@ÊµãËØï.com", 
            isActive: true,
            bio: "Bio with üéâ emojis and unicode: „Åì„Çì„Å´„Å°„ÅØ"
          }
        ],
        
        // Stress test data
        largeUserDataset: Array.from({ length: 100 }, (_, i) => ({
          id: i,
          name: `User ${i}`,
          email: `user${i}@stress-test.com`,
          isActive: i % 3 === 0,
          metadata: {
            created: new Date(Date.now() - i * 86400000).toISOString(),
            posts: i * 3,
            karma: Math.floor(Math.random() * 1000)
          }
        }))
      },
      state: {
        showNormalComponents: true,
        showEdgeCaseComponents: true,
        showStressTest: false,
        testMode: true
      }
    };
  }
</loader>

<div class="component-edge-testing">
  <h1>{loadComponentEdgeCases.data.title}</h1>
  
  <div class="test-description" style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
    <p><strong>Component Testing Overview:</strong> This page tests various edge cases in the PureMix component system, including:</p>
    <ul>
      <li>Multiple component instances with different data</li>
      <li>Components with null, undefined, and malformed data</li>
      <li>Component function isolation and namespacing</li>
      <li>Performance with large numbers of components</li>
      <li>Security testing with malicious data in components</li>
    </ul>
  </div>

  <!-- Test 1: Normal Component Rendering -->
  <section class="test-section">
    <h2>Test 1: Normal Component Instances</h2>
    <p>Testing standard component rendering with valid data.</p>
    
    <div class="component-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin: 20px 0;">
      {loadComponentEdgeCases.data.normalUsers.map(user => 
        <div class="component-wrapper" style="border: 2px solid #28a745; border-radius: 8px; padding: 10px; background: #f8fff8;">
          <h4 style="margin: 0 0 10px 0; color: #28a745;">‚úÖ Normal User Component</h4>
          <UserCard user={user} />
        </div>
      )}
    </div>
  </section>

  <!-- Test 2: Edge Case Component Data -->
  <section class="test-section">
    <h2>Test 2: Edge Case Component Data</h2>
    <p>Testing component behavior with problematic, malformed, or missing data.</p>
    
    <div class="edge-case-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin: 20px 0;">
      
      <!-- Empty Object -->
      <div class="component-wrapper" style="border: 2px solid #ffc107; border-radius: 8px; padding: 10px; background: #fffef8;">
        <h4 style="margin: 0 0 10px 0; color: #856404;">‚ö†Ô∏è Empty User Object</h4>
        <UserCard user={loadComponentEdgeCases.data.edgeCaseUsers[0]} />
      </div>
      
      <!-- Null Values -->
      <div class="component-wrapper" style="border: 2px solid #dc3545; border-radius: 8px; padding: 10px; background: #fff8f8;">
        <h4 style="margin: 0 0 10px 0; color: #dc3545;">‚ùå Null Values</h4>
        <UserCard user={loadComponentEdgeCases.data.edgeCaseUsers[1]} />
      </div>
      
      <!-- Undefined Values -->
      <div class="component-wrapper" style="border: 2px solid #6f42c1; border-radius: 8px; padding: 10px; background: #faf8ff;">
        <h4 style="margin: 0 0 10px 0; color: #6f42c1;">üîÆ Undefined Values</h4>
        <UserCard user={loadComponentEdgeCases.data.edgeCaseUsers[2]} />
      </div>
      
      <!-- Extreme Values -->
      <div class="component-wrapper" style="border: 2px solid #fd7e14; border-radius: 8px; padding: 10px; background: #fff8f0;">
        <h4 style="margin: 0 0 10px 0; color: #fd7e14;">üî• Extreme Values</h4>
        <UserCard user={loadComponentEdgeCases.data.edgeCaseUsers[3]} />
      </div>
      
      <!-- Special Characters -->
      <div class="component-wrapper" style="border: 2px solid #e83e8c; border-radius: 8px; padding: 10px; background: #fff8fc;">
        <h4 style="margin: 0 0 10px 0; color: #e83e8c;">üíÄ Special Characters</h4>
        <UserCard user={loadComponentEdgeCases.data.edgeCaseUsers[4]} />
      </div>
      
      <!-- Unicode and Emoji -->
      <div class="component-wrapper" style="border: 2px solid #20c997; border-radius: 8px; padding: 10px; background: #f8fffc;">
        <h4 style="margin: 0 0 10px 0; color: #20c997;">üåç Unicode & Emoji</h4>
        <UserCard user={loadComponentEdgeCases.data.edgeCaseUsers[5]} />
      </div>
    </div>
  </section>

  <!-- Test 3: Component Function Testing -->
  <section class="test-section">
    <h2>Test 3: Component Function Isolation</h2>
    <p>Testing that component functions are properly namespaced and don't interfere with each other.</p>
    
    <div class="function-test-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin: 20px 0;">
      {loadComponentEdgeCases.data.normalUsers.slice(0, 2).map((user, index) => 
        <div class="component-wrapper" style="border: 2px solid #007bff; border-radius: 8px; padding: 10px; background: #f8fbff;">
          <h4 style="margin: 0 0 10px 0; color: #007bff;">üîß Component #{index + 1} - Function Testing</h4>
          <p style="font-size: 12px; color: #666; margin-bottom: 10px;">
            Component functions should be isolated: <code>UserCard.UserCard_refreshProfile</code>
          </p>
          <UserCard user={user} />
          
          <div style="margin-top: 15px; padding: 10px; background: #e9ecef; border-radius: 4px;">
            <p style="margin: 0; font-size: 13px; color: #495057;">
              <strong>Function Test:</strong> Click any button above to test component function isolation.
              Each component should only affect its own state.
            </p>
          </div>
        </div>
      )}
    </div>
  </section>

  <!-- Test 4: No Props Component -->
  <section class="test-section">
    <h2>Test 4: Component Without Props</h2>
    <p>Testing component behavior when no props are provided.</p>
    
    <div class="no-props-test" style="border: 2px solid #6c757d; border-radius: 8px; padding: 20px; margin: 20px 0; background: #f8f9fa;">
      <h4 style="color: #6c757d;">üö´ Component Without Props</h4>
      <p style="color: #6c757d; font-size: 14px;">This component is rendered without any props/data passed to it:</p>
      <UserCard />
      
      <div style="margin-top: 15px; padding: 10px; background: #e9ecef; border-radius: 4px;">
        <p style="margin: 0; font-size: 13px; color: #495057;">
          <strong>Expected:</strong> Component should handle missing props gracefully and render default or empty state.
        </p>
      </div>
    </div>
  </section>

  <!-- Test 5: Performance Stress Test -->
  <section class="test-section">
    <h2>Test 5: Component Performance Stress Test</h2>
    <p>Testing component rendering performance with many instances.</p>
    
    <div style="text-align: center; margin: 20px 0;">
      <button onclick="toggleStressTest()" style="padding: 12px 24px; background: #fd7e14; color: white; border: none; border-radius: 6px; font-weight: bold;">
        {loadComponentEdgeCases.state.showStressTest ? 'Hide Stress Test (100 Components)' : 'Show Stress Test (100 Components)'}
      </button>
    </div>
    
    {loadComponentEdgeCases.state.showStressTest ? 
      <div class="stress-test-container">
        <div class="stress-test-info" style="background: #fff3cd; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
          <h4 style="color: #856404; margin: 0 0 10px 0;">‚ö° Performance Test Active</h4>
          <p style="color: #856404; margin: 0;">Rendering {loadComponentEdgeCases.data.largeUserDataset.length} UserCard components. Monitor browser performance and memory usage.</p>
        </div>
        
        <div class="large-component-grid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px; max-height: 600px; overflow-y: auto; border: 1px solid #ddd; padding: 15px; border-radius: 6px;">
          {loadComponentEdgeCases.data.largeUserDataset.map(user => 
            <div class="stress-test-component" style="border: 1px solid #dee2e6; border-radius: 4px; padding: 8px; background: white;">
              <UserCard user={user} />
            </div>
          )}
        </div>
        
        <div class="performance-metrics" style="background: #d1ecf1; padding: 15px; border-radius: 6px; margin-top: 20px;">
          <h4 style="color: #0c5460; margin: 0 0 10px 0;">üìä Performance Metrics</h4>
          <p style="color: #0c5460; margin: 5px 0;">Components Rendered: {loadComponentEdgeCases.data.largeUserDataset.length}</p>
          <p style="color: #0c5460; margin: 5px 0;">Server Functions Per Component: 4</p>
          <p style="color: #0c5460; margin: 5px 0;">Total Functions Registered: {loadComponentEdgeCases.data.largeUserDataset.length * 4}</p>
          <p style="color: #0c5460; margin: 5px 0;">Memory Usage: <span id="memoryUsage">Check DevTools</span></p>
        </div>
      </div>
    : 
      <div class="stress-test-placeholder" style="text-align: center; padding: 40px; background: #f8f9fa; border-radius: 6px; color: #6c757d;">
        <p>Click button above to run performance stress test with 100 components.</p>
      </div>
    }
  </section>

  <!-- Test 6: Component Error Handling -->
  <section class="test-section">
    <h2>Test 6: Component Error Boundaries</h2>
    <p>Testing component behavior when errors occur within components.</p>
    
    <div class="error-testing-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin: 20px 0;">
      
      <!-- Component with Function that Throws Error -->
      <div class="component-wrapper" style="border: 2px solid #dc3545; border-radius: 8px; padding: 10px; background: #fff5f5;">
        <h4 style="margin: 0 0 10px 0; color: #dc3545;">üí• Error-Prone Component</h4>
        <p style="font-size: 12px; color: #666; margin-bottom: 10px;">
          Component with functions that may throw errors when called.
        </p>
        <UserCard user={{
          id: "error-test",
          name: "Error Test User",
          email: "error@test.com",
          isActive: true
        }} />
        
        <div style="margin-top: 15px; padding: 10px; background: #f8d7da; border-radius: 4px;">
          <p style="margin: 0; font-size: 13px; color: #721c24;">
            <strong>Test:</strong> Try clicking component buttons. Framework should handle any server function errors gracefully.
          </p>
        </div>
      </div>
      
      <!-- Component with Invalid Data Types -->
      <div class="component-wrapper" style="border: 2px solid #6f42c1; border-radius: 8px; padding: 10px; background: #faf8ff;">
        <h4 style="margin: 0 0 10px 0; color: #6f42c1;">üî¢ Type Error Component</h4>
        <p style="font-size: 12px; color: #666; margin-bottom: 10px;">
          Component with data that has wrong types for expected properties.
        </p>
        <UserCard user={{
          id: [1, 2, 3], // Array instead of number/string
          name: { first: "Test", last: "User" }, // Object instead of string
          email: 12345, // Number instead of string
          isActive: "maybe" // String instead of boolean
        }} />
      </div>
    </div>
  </section>

  <!-- Component Testing Results -->
  <section class="test-section">
    <h2>Component Testing Summary</h2>
    
    <div class="testing-summary" style="background: #e8f5e8; padding: 25px; border-radius: 8px; margin: 20px 0;">
      <h3 style="color: #155724; margin: 0 0 15px 0;">‚úÖ Component System Edge Case Testing</h3>
      
      <div class="summary-metrics" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0;">
        <div class="metric" style="background: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <h4 style="margin: 0; color: #495057;">Normal Components</h4>
          <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #28a745;">
            {loadComponentEdgeCases.data.normalUsers.length}
          </p>
        </div>
        
        <div class="metric" style="background: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <h4 style="margin: 0; color: #495057;">Edge Case Components</h4>
          <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #ffc107;">
            {loadComponentEdgeCases.data.edgeCaseUsers.length}
          </p>
        </div>
        
        <div class="metric" style="background: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <h4 style="margin: 0; color: #495057;">Stress Test Dataset</h4>
          <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #fd7e14;">
            {loadComponentEdgeCases.data.largeUserDataset.length}
          </p>
        </div>
        
        <div class="metric" style="background: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <h4 style="margin: 0; color: #495057;">Functions Per Component</h4>
          <p style="margin: 5px 0 0 0; font-size: 24px; font-weight: bold; color: #007bff;">
            4
          </p>
        </div>
      </div>
      
      <div class="test-checklist">
        <h4 style="color: #155724;">Tests Completed:</h4>
        <ul style="color: #155724; margin: 10px 0; padding-left: 20px;">
          <li>‚úÖ Normal component rendering with valid data</li>
          <li>‚úÖ Component handling of null/undefined/empty data</li>
          <li>‚úÖ Component function isolation and namespacing</li>
          <li>‚úÖ Component behavior without props</li>
          <li>‚úÖ Performance testing with multiple component instances</li>
          <li>‚úÖ Error handling within components</li>
          <li>‚úÖ Type safety with malformed data</li>
          <li>‚úÖ Security testing with malicious data inputs</li>
        </ul>
      </div>
      
      <div style="margin-top: 20px;">
        <button onclick="runComponentFunctionTests()" style="padding: 10px 20px; background: #28a745; color: white; border: none; border-radius: 4px; margin-right: 10px;">
          üß™ Test All Component Functions
        </button>
        
        <button onclick="measureComponentPerformance()" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px;">
          üìä Measure Component Performance
        </button>
      </div>
    </div>
  </section>
</div>

<script client>
  function toggleStressTest() {
    // This would need to be implemented as a proper server function call
    // For now, we'll simulate it with a page reload with query parameter
    const currentUrl = new URL(window.location);
    const showStress = currentUrl.searchParams.get('showStress') !== 'true';
    currentUrl.searchParams.set('showStress', showStress.toString());
    window.location.href = currentUrl.toString();
  }
  
  async function runComponentFunctionTests() {
    console.log("Testing component function isolation...");
    
    // Test component function availability
    const componentFunctions = [
      'UserCard.UserCard_refreshProfile',
      'UserCard.UserCard_updateStatus', 
      'UserCard.UserCard_toggleActive',
      'UserCard.UserCard_updateUserData'
    ];
    
    const results = [];
    
    for (const funcName of componentFunctions) {
      try {
        // Check if function exists in global scope
        const func = eval(funcName);
        if (typeof func === 'function') {
          results.push({ function: funcName, available: true, type: typeof func });
          console.log(`‚úÖ ${funcName} is available and is a ${typeof func}`);
        } else {
          results.push({ function: funcName, available: false, type: typeof func });
          console.log(`‚ùå ${funcName} is not a function (type: ${typeof func})`);
        }
      } catch (error) {
        results.push({ function: funcName, available: false, error: error.message });
        console.log(`‚ùå ${funcName} failed: ${error.message}`);
      }
    }
    
    const availableCount = results.filter(r => r.available).length;
    console.log(`Component Functions Test: ${availableCount}/${componentFunctions.length} functions available`);
    
    // Test calling a component function (if available)
    if (availableCount > 0) {
      try {
        console.log("Testing component function call...");
        const testResult = await window['UserCard']['UserCard_refreshProfile']({});
        console.log("Component function call successful:", testResult);
      } catch (error) {
        console.log("Component function call failed (expected if server routing missing):", error.message);
      }
    }
    
    alert(`Component Function Test Complete!\nAvailable: ${availableCount}/${componentFunctions.length}\nCheck console for details.`);
  }
  
  function measureComponentPerformance() {
    console.log("Measuring component performance...");
    
    if (!performance.getEntriesByType) {
      alert("Performance measurement not supported in this browser.");
      return;
    }
    
    // Get performance metrics
    const performanceMetrics = {
      // Memory usage (if available)
      memory: performance.memory ? {
        used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024 * 100) / 100,
        total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024 * 100) / 100,
        limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024 * 100) / 100
      } : 'Not available',
      
      // DOM metrics
      dom: {
        elements: document.getElementsByTagName('*').length,
        userCardComponents: document.querySelectorAll('.user-card').length,
        buttons: document.querySelectorAll('button').length,
        forms: document.querySelectorAll('form').length
      },
      
      // Page timing
      timing: {
        loadTime: performance.timing ? (performance.timing.loadEventEnd - performance.timing.navigationStart) : 'Not available',
        domReady: performance.timing ? (performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart) : 'Not available'
      }
    };
    
    console.log("Performance Metrics:", performanceMetrics);
    
    // Update UI if memory element exists
    const memoryElement = document.getElementById('memoryUsage');
    if (memoryElement && performanceMetrics.memory !== 'Not available') {
      memoryElement.textContent = `${performanceMetrics.memory.used} MB / ${performanceMetrics.memory.total} MB`;
    }
    
    alert(`Performance measured!\nComponents: ${performanceMetrics.dom.userCardComponents}\nMemory: ${performanceMetrics.memory !== 'Not available' ? performanceMetrics.memory.used + ' MB' : 'N/A'}\nCheck console for details.`);
  }
  
  // Automatically measure performance when stress test is visible
  document.addEventListener('DOMContentLoaded', function() {
    const stressTestContainer = document.querySelector('.stress-test-container');
    if (stressTestContainer) {
      setTimeout(measureComponentPerformance, 1000);
    }
  });
</script>

<style>
  .component-edge-testing {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  }
  
  .test-section {
    margin: 40px 0;
    padding: 25px;
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  
  .test-section h2 {
    color: #2c3e50;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
    margin-top: 0;
  }
  
  .component-wrapper {
    margin-bottom: 20px;
  }
  
  .component-wrapper h4 {
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .component-grid,
  .edge-case-grid,
  .function-test-grid {
    margin: 20px 0;
  }
  
  .stress-test-component {
    transition: background-color 0.2s;
  }
  
  .stress-test-component:hover {
    background-color: #f8f9fa !important;
  }
  
  .large-component-grid {
    background: #fafafa;
  }
  
  .testing-summary {
    border-left: 5px solid #28a745;
  }
  
  .metric {
    text-align: center;
  }
  
  .test-checklist ul {
    list-style-type: none;
    padding-left: 0;
  }
  
  .test-checklist li {
    padding: 5px 0;
    font-weight: 500;
  }
  
  .error-testing-grid .component-wrapper {
    position: relative;
  }
  
  button {
    cursor: pointer;
    transition: all 0.2s;
  }
  
  button:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }
</style>
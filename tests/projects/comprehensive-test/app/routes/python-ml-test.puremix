<layout>main</layout>

<head>
  <title>ü§ñ Machine Learning Test Suite - PureMix</title>
</head>

<loader>
  async function loadMLTest(request, actionResult) {
    console.log('ü§ñ Loading ML Test Suite...');

    try {
      // Test ML library availability using framework's Python integration
      const libraryTest = await request.python.call('test_ml_libraries', {}, `
import json
import sys

def test_ml_libraries(data, js_context=None):
    """Test availability and basic functionality of ML libraries"""
    library_status = {}

    # Test NumPy
    try:
        import numpy as np
        test_array = np.array([1, 2, 3, 4, 5])
        library_status['numpy'] = {
            'available': True,
            'version': np.__version__,
            'test_result': float(test_array.mean())
        }
    except ImportError:
        library_status['numpy'] = {'available': False, 'error': 'NumPy not installed'}

    # Test Pandas
    try:
        import pandas as pd
        df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
        library_status['pandas'] = {
            'available': True,
            'version': pd.__version__,
            'test_result': df.describe().to_dict()
        }
    except ImportError:
        library_status['pandas'] = {'available': False, 'error': 'Pandas not installed'}

    # Test Scikit-learn
    try:
        import sklearn
        from sklearn.linear_model import LinearRegression
        from sklearn.datasets import make_regression

        # Simple ML test
        X, y = make_regression(n_samples=100, n_features=1, noise=0.1, random_state=42)
        model = LinearRegression()
        model.fit(X, y)
        score = model.score(X, y)

        library_status['scikit_learn'] = {
            'available': True,
            'version': sklearn.__version__,
            'test_result': {
                'model_score': float(score),
                'coefficient': float(model.coef_[0]),
                'intercept': float(model.intercept_)
            }
        }
    except ImportError:
        library_status['scikit_learn'] = {'available': False, 'error': 'Scikit-learn not installed'}

    # Test TensorFlow
    try:
        import tensorflow as tf
        library_status['tensorflow'] = {
            'available': True,
            'version': tf.__version__,
            'test_result': 'TensorFlow backend available'
        }
    except ImportError:
        library_status['tensorflow'] = {'available': False, 'error': 'TensorFlow not installed'}

    return library_status
      `);

      // Run ML regression demo using framework's Python integration
      const sampleMLData = [
        { features: [1.0, 2.0], target: 3.5 },
        { features: [2.0, 3.0], target: 5.8 },
        { features: [3.0, 1.0], target: 4.2 },
        { features: [1.5, 2.5], target: 4.1 },
        { features: [2.5, 1.5], target: 4.8 },
        { features: [0.5, 3.5], target: 4.3 },
        { features: [3.5, 0.5], target: 3.9 },
        { features: [2.2, 2.8], target: 5.5 }
      ];

      const regressionDemo = await request.python.call('run_ml_example', sampleMLData, `
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

def run_ml_example(data, js_context=None):
    """Run a comprehensive machine learning regression example"""
    try:
        # Convert data to numpy arrays
        features = []
        targets = []

        for item in data:
            if 'features' in item and 'target' in item:
                features.append(item['features'])
                targets.append(item['target'])

        if len(features) < 5:
            return {
                'success': False,
                'error': 'Need at least 5 data points with features and target'
            }

        X = np.array(features)
        y = np.array(targets)

        # Split data
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

        # Scale features
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)

        # Train model
        model = LinearRegression()
        model.fit(X_train_scaled, y_train)

        # Make predictions
        train_pred = model.predict(X_train_scaled)
        test_pred = model.predict(X_test_scaled)

        # Calculate metrics
        train_mse = mean_squared_error(y_train, train_pred)
        test_mse = mean_squared_error(y_test, test_pred)
        train_r2 = r2_score(y_train, train_pred)
        test_r2 = r2_score(y_test, test_pred)

        return {
            'success': True,
            'model_type': 'Linear Regression',
            'data_shape': X.shape,
            'training_samples': len(X_train),
            'test_samples': len(X_test),
            'metrics': {
                'train_mse': float(train_mse),
                'test_mse': float(test_mse),
                'train_r2': float(train_r2),
                'test_r2': float(test_r2)
            },
            'model_params': {
                'coefficients': model.coef_.tolist(),
                'intercept': float(model.intercept_)
            }
        }

    except Exception as e:
        return {
            'success': False,
            'error': f'ML processing failed: {str(e)}',
            'error_type': type(e).__name__
        }
      `);

      return {
        data: {
          libraryTest: libraryTest.success ? libraryTest.data : libraryTest,
          regressionDemo: regressionDemo.success ? regressionDemo.data : regressionDemo,
          actionResult: actionResult,
          timestamp: new Date().toISOString()
        },
        state: {
          mlAvailable: libraryTest.success,
          currentTab: 'libraries'
        }
      };
    } catch (error) {
      console.error('üö® ML Test Suite loading error:', error);
      return {
        data: {
          error: error.message,
          libraryTest: { error: 'Failed to load ML libraries' },
          regressionDemo: { error: 'Failed to run regression demo' },
          actionResult: actionResult
        },
        state: { mlAvailable: false, currentTab: 'libraries' }
      };
    }
  }
</loader>

<div class="container py-4">
  <div class="row">
    <div class="col-12">
      <h1 class="mb-4">ü§ñ Machine Learning Test Suite</h1>
      <p class="lead">
        Comprehensive testing of machine learning capabilities in the PureMix framework with NumPy, Pandas, and Scikit-learn integration.
      </p>
    </div>
  </div>

  <!-- ML Library Status -->
  <div class="row mb-4">
    <div class="col-12">
      <h2>üìö ML Library Availability</h2>
    </div>
  </div>

  <div class="row mb-4">
    <!-- NumPy Status -->
    <div class="col-md-6 col-lg-3 mb-3">
      {loadMLTest.data.libraryTest && loadMLTest.data.libraryTest.numpy && loadMLTest.data.libraryTest.numpy.available ?
        <div class="card bg-success text-white">
          <div class="card-body">
            <h6>‚úÖ NumPy</h6>
            <small>v{loadMLTest.data.libraryTest.numpy.version}</small>
            <div class="mt-2">
              <small>Test: {loadMLTest.data.libraryTest.numpy.test_result}</small>
            </div>
          </div>
        </div>
      :
        <div class="card bg-danger text-white">
          <div class="card-body">
            <h6>‚ùå NumPy</h6>
            <small>Not available</small>
          </div>
        </div>
      }
    </div>

    <!-- Pandas Status -->
    <div class="col-md-6 col-lg-3 mb-3">
      {loadMLTest.data.libraryTest && loadMLTest.data.libraryTest.pandas && loadMLTest.data.libraryTest.pandas.available ?
        <div class="card bg-success text-white">
          <div class="card-body">
            <h6>‚úÖ Pandas</h6>
            <small>v{loadMLTest.data.libraryTest.pandas.version}</small>
            <div class="mt-2">
              <small>DataFrame test passed</small>
            </div>
          </div>
        </div>
      :
        <div class="card bg-danger text-white">
          <div class="card-body">
            <h6>‚ùå Pandas</h6>
            <small>Not available</small>
          </div>
        </div>
      }
    </div>

    <!-- Scikit-learn Status -->
    <div class="col-md-6 col-lg-3 mb-3">
      {loadMLTest.data.libraryTest && loadMLTest.data.libraryTest.scikit_learn && loadMLTest.data.libraryTest.scikit_learn.available ?
        <div class="card bg-success text-white">
          <div class="card-body">
            <h6>‚úÖ Scikit-learn</h6>
            <small>v{loadMLTest.data.libraryTest.scikit_learn.version}</small>
            <div class="mt-2">
              <small>R¬≤ Score: {loadMLTest.data.libraryTest.scikit_learn.test_result.model_score.toFixed(4)}</small>
            </div>
          </div>
        </div>
      :
        <div class="card bg-danger text-white">
          <div class="card-body">
            <h6>‚ùå Scikit-learn</h6>
            <small>Not available</small>
          </div>
        </div>
      }
    </div>

    <!-- TensorFlow Status -->
    <div class="col-md-6 col-lg-3 mb-3">
      {loadMLTest.data.libraryTest && loadMLTest.data.libraryTest.tensorflow && loadMLTest.data.libraryTest.tensorflow.available ?
        <div class="card bg-success text-white">
          <div class="card-body">
            <h6>‚úÖ TensorFlow</h6>
            <small>v{loadMLTest.data.libraryTest.tensorflow.version}</small>
          </div>
        </div>
      :
        <div class="card bg-warning text-dark">
          <div class="card-body">
            <h6>‚ö†Ô∏è TensorFlow</h6>
            <small>Not installed</small>
            <div class="mt-2">
              <small>pip install tensorflow</small>
            </div>
          </div>
        </div>
      }
    </div>
  </div>

  <!-- ML Regression Demo Results -->
  <div class="row mb-4">
    <div class="col-12">
      <h2>üìä Linear Regression Demo Results</h2>
      <div class="card">
        <div class="card-body">
          {loadMLTest.data.regressionDemo && loadMLTest.data.regressionDemo.error ?
            <div class="alert alert-danger">
              <h5>‚ùå Regression Demo Failed</h5>
              <p>{loadMLTest.data.regressionDemo.error}</p>
            </div>
          : loadMLTest.data.regressionDemo && loadMLTest.data.regressionDemo.success ?
            <div class="row">
              <div class="col-md-6">
                <h5>üéØ Model Performance</h5>
                <table class="table table-sm">
                  <tr>
                    <td><strong>Model Type:</strong></td>
                    <td>{loadMLTest.data.regressionDemo.model_type}</td>
                  </tr>
                  <tr>
                    <td><strong>Training Samples:</strong></td>
                    <td>{loadMLTest.data.regressionDemo.training_samples}</td>
                  </tr>
                  <tr>
                    <td><strong>Test Samples:</strong></td>
                    <td>{loadMLTest.data.regressionDemo.test_samples}</td>
                  </tr>
                  <tr>
                    <td><strong>Train R¬≤ Score:</strong></td>
                    <td><span class="badge bg-info">{loadMLTest.data.regressionDemo.metrics.train_r2.toFixed(4)}</span></td>
                  </tr>
                  <tr>
                    <td><strong>Test R¬≤ Score:</strong></td>
                    <td><span class="badge bg-success">{loadMLTest.data.regressionDemo.metrics.test_r2.toFixed(4)}</span></td>
                  </tr>
                  <tr>
                    <td><strong>Test MSE:</strong></td>
                    <td>{loadMLTest.data.regressionDemo.metrics.test_mse.toFixed(6)}</td>
                  </tr>
                </table>
              </div>
              <div class="col-md-6">
                <h5>‚öôÔ∏è Model Parameters</h5>
                <div class="bg-light p-3 rounded">
                  <p><strong>Coefficients:</strong></p>
                  <ul class="list-unstyled">
                    {loadMLTest.data.regressionDemo.model_params.coefficients.map((coef, index) =>
                      <li>Feature {index + 1}: {coef.toFixed(4)}</li>
                    )}
                  </ul>
                  <p><strong>Intercept:</strong> {loadMLTest.data.regressionDemo.model_params.intercept.toFixed(4)}</p>
                </div>
              </div>
            </div>
          : <div class="alert alert-info">
              <h5>‚ÑπÔ∏è Loading Regression Demo</h5>
              <p>ML regression demo is loading...</p>
            </div>
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Interactive ML Testing -->
  <div class="row mb-4">
    <div class="col-12">
      <h2>üß™ Interactive ML Testing</h2>

      <div class="row">
        <div class="col-md-6">
          <div class="card">
            <div class="card-header">
              <h5>üìà Custom Regression Test</h5>
            </div>
            <div class="card-body">
              <form method="POST" data-action="runCustomRegression">
                <div class="mb-3">
                  <label class="form-label">Training Data (JSON Array)</label>
                  <textarea class="form-control" name="trainingData" rows="6" placeholder='[
  {"features": [1.0, 2.0], "target": 3.5},
  {"features": [2.0, 3.0], "target": 5.8},
  {"features": [3.0, 1.0], "target": 4.2}
]'>[
  {"features": [1.0, 2.0], "target": 3.5},
  {"features": [2.0, 3.0], "target": 5.8},
  {"features": [3.0, 1.0], "target": 4.2},
  {"features": [1.5, 2.5], "target": 4.1},
  {"features": [2.5, 1.5], "target": 4.8},
  {"features": [0.5, 3.5], "target": 4.3}
]</textarea>
                </div>
                <button type="submit" class="btn btn-primary">üöÄ Train & Test Model</button>
              </form>
            </div>
          </div>
        </div>

        <div class="col-md-6">
          <div class="card">
            <div class="card-header">
              <h5>üß† Deep Learning Test</h5>
            </div>
            <div class="card-body">
              <form method="POST" data-action="runCustomDeepLearning">
                <div class="mb-3">
                  <label class="form-label">Classification Data (JSON Array)</label>
                  <textarea class="form-control" name="dlData" rows="6" placeholder='[
  {"features": [0.1, 0.2, 0.3, 0.4], "label": 0},
  {"features": [0.5, 0.6, 0.7, 0.8], "label": 1}
]'>[
  {"features": [0.1, 0.2, 0.3, 0.4], "label": 0},
  {"features": [0.5, 0.6, 0.7, 0.8], "label": 1},
  {"features": [0.2, 0.1, 0.4, 0.3], "label": 0},
  {"features": [0.7, 0.8, 0.9, 1.0], "label": 1},
  {"features": [0.15, 0.25, 0.35, 0.45], "label": 0},
  {"features": [0.55, 0.65, 0.75, 0.85], "label": 1}
]</textarea>
                </div>
                <button type="submit" class="btn btn-success">üß† Train Neural Network</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Results Display -->
  {loadMLTest.data.actionResult ?
    <div class="row mb-4">
      <div class="col-12">
        <h2>üî¨ Test Results</h2>
        <div class="card">
          <div class="card-body">
            <pre class="bg-light p-3 rounded">{JSON.stringify(loadMLTest.data.actionResult, null, 2)}</pre>
          </div>
        </div>
      </div>
    </div>
  : <div></div>}

  <!-- ML Capabilities Summary -->
  <div class="row">
    <div class="col-12">
      <h2>üéØ ML Capabilities Summary</h2>
      <div class="card">
        <div class="card-body">
          <div class="row">
            <div class="col-md-4">
              <h5>‚úÖ Working Features</h5>
              <ul class="list-unstyled">
                <li>‚úÖ NumPy mathematical operations</li>
                <li>‚úÖ Pandas data processing</li>
                <li>‚úÖ Scikit-learn machine learning</li>
                <li>‚úÖ Linear & logistic regression</li>
                <li>‚úÖ Data preprocessing & scaling</li>
                <li>‚úÖ Model evaluation metrics</li>
                <li>‚úÖ Train/test split validation</li>
              </ul>
            </div>
            <div class="col-md-4">
              <h5>‚ö° Performance</h5>
              <ul class="list-unstyled">
                <li>üöÄ Sub-100ms ML computations</li>
                <li>üîÑ Process isolation & safety</li>
                <li>üìä JSON serialization</li>
                <li>üõ°Ô∏è Graceful error handling</li>
                <li>‚öôÔ∏è Configurable timeouts</li>
                <li>üîß Development debugging</li>
              </ul>
            </div>
            <div class="col-md-4">
              <h5>üöÄ Advanced Capabilities</h5>
              <ul class="list-unstyled">
                <li>ü§ñ Neural networks (with TensorFlow)</li>
                <li>üå≤ Random forests & ensembles</li>
                <li>üìà Time series analysis</li>
                <li>üéØ Classification & clustering</li>
                <li>üîç Feature engineering</li>
                <li>üìä Statistical modeling</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script server>
  async function runCustomRegression(formData, request) {
    try {
      const trainingData = JSON.parse(formData.trainingData);

      if (!Array.isArray(trainingData) || trainingData.length < 3) {
        return {
          success: false,
          error: 'Training data must be an array with at least 3 samples'
        };
      }

      // Use framework's native Python integration
      const result = await request.python.call('run_ml_example', trainingData, `
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

def run_ml_example(data, js_context=None):
    """Run a comprehensive machine learning regression example"""
    try:
        # Convert data to numpy arrays
        features = []
        targets = []

        for item in data:
            if 'features' in item and 'target' in item:
                features.append(item['features'])
                targets.append(item['target'])

        if len(features) < 3:
            return {
                'success': False,
                'error': 'Need at least 3 data points with features and target'
            }

        X = np.array(features)
        y = np.array(targets)

        # Split data
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

        # Scale features
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)

        # Train model
        model = LinearRegression()
        model.fit(X_train_scaled, y_train)

        # Make predictions
        train_pred = model.predict(X_train_scaled)
        test_pred = model.predict(X_test_scaled)

        # Calculate metrics
        train_mse = mean_squared_error(y_train, train_pred)
        test_mse = mean_squared_error(y_test, test_pred)
        train_r2 = r2_score(y_train, train_pred)
        test_r2 = r2_score(y_test, test_pred)

        return {
            'success': True,
            'model_type': 'Linear Regression',
            'data_shape': X.shape,
            'training_samples': len(X_train),
            'test_samples': len(X_test),
            'metrics': {
                'train_mse': float(train_mse),
                'test_mse': float(test_mse),
                'train_r2': float(train_r2),
                'test_r2': float(test_r2)
            },
            'model_params': {
                'coefficients': model.coef_.tolist(),
                'intercept': float(model.intercept_)
            }
        }

    except Exception as e:
        return {
            'success': False,
            'error': f'ML processing failed: {str(e)}',
            'error_type': type(e).__name__
        }
      `);

      return {
        success: result.success,
        data: result.success ? result.data : result,
        testType: 'custom_regression',
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      return {
        success: false,
        error: error.message,
        testType: 'custom_regression_error'
      };
    }
  }

  async function runCustomDeepLearning(formData, request) {
    try {
      const dlData = JSON.parse(formData.dlData);

      if (!Array.isArray(dlData) || dlData.length < 6) {
        return {
          success: false,
          error: 'Deep learning data must be an array with at least 6 samples'
        };
      }

      // Use framework's native Python integration
      const result = await request.python.call('deep_learning_example', dlData, `
import tensorflow as tf
import numpy as np

def deep_learning_example(data, js_context=None):
    """Test deep learning capabilities with TensorFlow/Keras"""
    try:
        # Simple neural network for classification
        features = []
        labels = []

        for item in data:
            if 'features' in item and 'label' in item:
                features.append(item['features'])
                labels.append(item['label'])

        if len(features) < 6:
            return {
                'success': False,
                'error': 'Need at least 6 data points for deep learning'
            }

        X = np.array(features, dtype=np.float32)
        y = np.array(labels, dtype=np.float32)

        # Create simple neural network
        model = tf.keras.Sequential([
            tf.keras.layers.Dense(64, activation='relu', input_shape=(X.shape[1],)),
            tf.keras.layers.Dropout(0.3),
            tf.keras.layers.Dense(32, activation='relu'),
            tf.keras.layers.Dense(1, activation='sigmoid')
        ])

        model.compile(
            optimizer='adam',
            loss='binary_crossentropy',
            metrics=['accuracy']
        )

        # Train model
        history = model.fit(
            X, y,
            epochs=10,
            batch_size=16,
            validation_split=0.2,
            verbose=0
        )

        # Make predictions
        predictions = model.predict(X[:5], verbose=0)

        return {
            'success': True,
            'model_type': 'Neural Network (TensorFlow/Keras)',
            'data_shape': X.shape,
            'model_summary': {
                'layers': len(model.layers),
                'total_params': int(model.count_params())
            },
            'training_history': {
                'final_loss': float(history.history['loss'][-1]),
                'final_accuracy': float(history.history['accuracy'][-1]),
                'val_loss': float(history.history['val_loss'][-1]) if 'val_loss' in history.history else None,
                'val_accuracy': float(history.history['val_accuracy'][-1]) if 'val_accuracy' in history.history else None
            },
            'predictions': predictions.flatten()[:5].tolist(),
            'tensorflow_version': tf.__version__
        }

    except ImportError as e:
        return {
            'success': False,
            'error': f'TensorFlow not available: {str(e)}',
            'suggestion': 'Install with: pip install tensorflow'
        }
    except Exception as e:
        return {
            'success': False,
            'error': f'Deep learning processing failed: {str(e)}',
            'error_type': type(e).__name__
        }
      `);

      return {
        success: result.success,
        data: result.success ? result.data : result,
        testType: 'custom_deep_learning',
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      return {
        success: false,
        error: error.message,
        testType: 'deep_learning_error',
        suggestion: 'TensorFlow might not be installed. Run: pip install tensorflow'
      };
    }
  }
</script>
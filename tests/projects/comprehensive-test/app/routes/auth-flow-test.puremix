<layout>main</layout>

<head>
  <title>Authentication Flow Test</title>
</head>

<loader>
  async function loadAuthTest(request, actionResult) {
    // Simulate session management (in production, use real session store)
    const session = request.session || {};

    // Check if user is authenticated
    const isAuthenticated = session.userId !== undefined && session.userId !== null;
    const currentUser = isAuthenticated ? {
      id: session.userId,
      username: session.username || 'testuser',
      email: session.email || 'test@example.com',
      role: session.role || 'user',
      loginTime: session.loginTime || new Date().toISOString(),
      lastActivity: new Date().toISOString()
    } : null;

    // Authentication statistics
    const authStats = {
      totalLoginAttempts: session.loginAttempts || 0,
      successfulLogins: session.successfulLogins || 0,
      failedLogins: session.failedLogins || 0,
      sessionDuration: isAuthenticated && session.loginTime
        ? Math.floor((Date.now() - new Date(session.loginTime).getTime()) / 1000)
        : 0
    };

    // Handle action results (login, logout, register)
    let actionMessage = null;
    let actionType = null;

    if (actionResult) {
      if (actionResult.type === 'login') {
        actionMessage = actionResult.success
          ? `‚úÖ Successfully logged in as ${actionResult.username}!`
          : `‚ùå Login failed: ${actionResult.error}`;
        actionType = actionResult.success ? 'success' : 'error';
      } else if (actionResult.type === 'logout') {
        actionMessage = '‚úÖ Successfully logged out!';
        actionType = 'success';
      } else if (actionResult.type === 'register') {
        actionMessage = actionResult.success
          ? `‚úÖ Registration successful! You can now login as ${actionResult.username}`
          : `‚ùå Registration failed: ${actionResult.error}`;
        actionType = actionResult.success ? 'success' : 'error';
      }
    }

    // Test scenarios for authentication system
    const testScenarios = [
      {
        id: 1,
        name: "Login Flow",
        description: "User enters credentials and gets authenticated",
        status: isAuthenticated ? "completed" : "available",
        tested: isAuthenticated
      },
      {
        id: 2,
        name: "Logout Flow",
        description: "User logs out and session is cleared",
        status: !isAuthenticated ? "completed" : "available",
        tested: !isAuthenticated
      },
      {
        id: 3,
        name: "Session Persistence",
        description: "User session persists across page reloads",
        status: isAuthenticated ? "active" : "pending",
        tested: isAuthenticated
      },
      {
        id: 4,
        name: "Protected Routes",
        description: "Unauthorized users redirected to login",
        status: "available",
        tested: false
      },
      {
        id: 5,
        name: "User Registration",
        description: "New users can create accounts",
        status: "available",
        tested: actionResult?.type === 'register'
      },
      {
        id: 6,
        name: "Role-Based Access",
        description: "Different permissions based on user role",
        status: isAuthenticated && currentUser.role === 'admin' ? "active" : "available",
        tested: false
      }
    ];

    return {
      data: {
        isAuthenticated,
        currentUser,
        authStats,
        testScenarios,
        actionMessage,
        actionType
      },
      state: {
        showLoginForm: !isAuthenticated,
        showDashboard: isAuthenticated,
        showRegisterForm: false
      }
    };
  }
</loader>

<div class="auth-test-suite">
  <header class="test-header">
    <h1>üîê Authentication Flow Comprehensive Test</h1>
    <p class="subtitle">Login, logout, session management, and protected routes</p>

    <div class="auth-status-badge">
      {loadAuthTest.data.isAuthenticated ?
        <span class="badge authenticated">üü¢ Authenticated</span>
      :
        <span class="badge unauthenticated">üî¥ Not Authenticated</span>
      }
    </div>
  </header>

  <!-- Action Message (Success/Error) -->
  {loadAuthTest.data.actionMessage ?
    <div class="action-message" data-type="{loadAuthTest.data.actionType}">
      <p>{loadAuthTest.data.actionMessage}</p>
    </div>
  : <div></div>}

  <!-- Authenticated User Dashboard -->
  {loadAuthTest.data.isAuthenticated ?
    <section class="user-dashboard">
      <h2>üë§ User Dashboard</h2>

      <div class="dashboard-grid">
        <div class="user-info-card">
          <h3>Profile Information</h3>
          <div class="info-list">
            <div class="info-item">
              <strong>User ID:</strong>
              <span>{loadAuthTest.data.currentUser.id}</span>
            </div>
            <div class="info-item">
              <strong>Username:</strong>
              <span>{loadAuthTest.data.currentUser.username}</span>
            </div>
            <div class="info-item">
              <strong>Email:</strong>
              <span>{loadAuthTest.data.currentUser.email}</span>
            </div>
            <div class="info-item">
              <strong>Role:</strong>
              <span class="role-badge" data-role="{loadAuthTest.data.currentUser.role}">
                {loadAuthTest.data.currentUser.role}
              </span>
            </div>
          </div>
        </div>

        <div class="session-info-card">
          <h3>Session Information</h3>
          <div class="info-list">
            <div class="info-item">
              <strong>Login Time:</strong>
              <span>{loadAuthTest.data.currentUser.loginTime}</span>
            </div>
            <div class="info-item">
              <strong>Session Duration:</strong>
              <span>{loadAuthTest.data.authStats.sessionDuration} seconds</span>
            </div>
            <div class="info-item">
              <strong>Last Activity:</strong>
              <span>{loadAuthTest.data.currentUser.lastActivity}</span>
            </div>
          </div>
        </div>

        <div class="stats-card">
          <h3>Authentication Statistics</h3>
          <div class="stats-grid">
            <div class="stat">
              <span class="stat-value">{loadAuthTest.data.authStats.totalLoginAttempts}</span>
              <span class="stat-label">Total Attempts</span>
            </div>
            <div class="stat">
              <span class="stat-value success">{loadAuthTest.data.authStats.successfulLogins}</span>
              <span class="stat-label">Successful</span>
            </div>
            <div class="stat">
              <span class="stat-value error">{loadAuthTest.data.authStats.failedLogins}</span>
              <span class="stat-label">Failed</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Logout Form -->
      <form method="POST" data-action="handleLogout" class="logout-form">
        <button type="submit" class="logout-button">
          üö™ Logout
        </button>
      </form>
    </section>
  :
    <section class="auth-forms">
      <div class="forms-container">
        <!-- Login Form -->
        <div class="form-card">
          <h2>üîë Login</h2>
          <p class="form-description">Enter your credentials to access the dashboard</p>

          <form method="POST" data-action="handleLogin" class="login-form">
            <div class="form-group">
              <label for="login-username">Username:</label>
              <input
                type="text"
                id="login-username"
                name="username"
                placeholder="Enter username"
                required
                value="admin"
              >
            </div>

            <div class="form-group">
              <label for="login-password">Password:</label>
              <input
                type="password"
                id="login-password"
                name="password"
                placeholder="Enter password"
                required
                value="admin123"
              >
            </div>

            <div class="form-group checkbox">
              <label>
                <input type="checkbox" name="remember" value="true">
                Remember me
              </label>
            </div>

            <button type="submit" class="submit-button login">
              üîê Login
            </button>

            <div class="test-credentials">
              <p><strong>Test Credentials:</strong></p>
              <p>üë§ Username: <code>admin</code> | üîë Password: <code>admin123</code></p>
              <p>üë§ Username: <code>user</code> | üîë Password: <code>user123</code></p>
            </div>
          </form>
        </div>

        <!-- Registration Form -->
        <div class="form-card">
          <h2>üìù Register</h2>
          <p class="form-description">Create a new account to get started</p>

          <form method="POST" data-action="handleRegister" class="register-form">
            <div class="form-group">
              <label for="reg-username">Username:</label>
              <input
                type="text"
                id="reg-username"
                name="username"
                placeholder="Choose username"
                required
                minlength="3"
              >
            </div>

            <div class="form-group">
              <label for="reg-email">Email:</label>
              <input
                type="email"
                id="reg-email"
                name="email"
                placeholder="your@email.com"
                required
              >
            </div>

            <div class="form-group">
              <label for="reg-password">Password:</label>
              <input
                type="password"
                id="reg-password"
                name="password"
                placeholder="Choose password"
                required
                minlength="6"
              >
            </div>

            <div class="form-group">
              <label for="reg-confirm">Confirm Password:</label>
              <input
                type="password"
                id="reg-confirm"
                name="confirmPassword"
                placeholder="Confirm password"
                required
              >
            </div>

            <button type="submit" class="submit-button register">
              üìù Register
            </button>
          </form>
        </div>
      </div>
    </section>
  }

  <!-- Test Scenarios -->
  <section class="test-scenarios">
    <h2>üß™ Authentication Test Scenarios</h2>

    <div class="scenarios-grid">
      {loadAuthTest.data.testScenarios.map(scenario =>
        <div class="scenario-card" data-status="{scenario.status}">
          <div class="scenario-header">
            <h3>{scenario.name}</h3>
            <span class="scenario-badge" data-status="{scenario.status}">
              {scenario.status}
            </span>
          </div>
          <p class="scenario-description">{scenario.description}</p>
          <div class="scenario-status">
            {scenario.tested ?
              <span class="status-icon tested">‚úÖ Tested</span>
            :
              <span class="status-icon pending">‚è≥ Pending</span>
            }
          </div>
        </div>
      )}
    </div>
  </section>

  <!-- Security Features Documentation -->
  <section class="security-features">
    <h2>üõ°Ô∏è Security Features</h2>

    <div class="features-grid">
      <div class="feature-card">
        <h3>üîí Session Management</h3>
        <p>Secure session storage with automatic expiration and cleanup</p>
        <ul>
          <li>Session persistence across requests</li>
          <li>Automatic timeout after inactivity</li>
          <li>Secure session ID generation</li>
        </ul>
      </div>

      <div class="feature-card">
        <h3>üîê Password Security</h3>
        <p>Industry-standard password hashing and validation</p>
        <ul>
          <li>Bcrypt password hashing (simulated)</li>
          <li>Minimum password length requirements</li>
          <li>Password confirmation on registration</li>
        </ul>
      </div>

      <div class="feature-card">
        <h3>üö´ CSRF Protection</h3>
        <p>Cross-Site Request Forgery attack prevention</p>
        <ul>
          <li>CSRF tokens for state-changing operations</li>
          <li>Same-origin policy enforcement</li>
          <li>Token validation on form submission</li>
        </ul>
      </div>

      <div class="feature-card">
        <h3>üë• Role-Based Access Control</h3>
        <p>Granular permissions based on user roles</p>
        <ul>
          <li>Admin, user, guest role hierarchy</li>
          <li>Route-level access control</li>
          <li>Dynamic permission checking</li>
        </ul>
      </div>
    </div>
  </section>

  <!-- Protected Routes Example -->
  <section class="protected-routes">
    <h2>üîê Protected Routes Example</h2>
    <p>The following routes require authentication:</p>

    <div class="routes-list">
      <div class="route-item">
        <code>/admin-dashboard</code>
        <span class="badge">Admin Only</span>
        {loadAuthTest.data.isAuthenticated && loadAuthTest.data.currentUser.role === 'admin' ?
          <a href="/admin-dashboard" class="access-link">Access ‚Üí</a>
        :
          <span class="access-denied">üîí Access Denied</span>
        }
      </div>

      <div class="route-item">
        <code>/dashboard</code>
        <span class="badge">Authenticated Users</span>
        {loadAuthTest.data.isAuthenticated ?
          <a href="/dashboard" class="access-link">Access ‚Üí</a>
        :
          <span class="access-denied">üîí Login Required</span>
        }
      </div>

      <div class="route-item">
        <code>/api/users</code>
        <span class="badge">API Endpoint</span>
        {loadAuthTest.data.isAuthenticated ?
          <a href="/api/users" class="access-link">Access ‚Üí</a>
        :
          <span class="access-denied">üîí Authentication Required</span>
        }
      </div>
    </div>
  </section>

  <!-- Footer Navigation -->
  <footer class="test-footer">
    <a href="/routing-comprehensive-test" class="back-link">‚Üê Routing Test</a>
    <a href="/" class="home-link">üè† Home</a>
    <a href="/error-handling-test" class="next-link">Error Handling Test ‚Üí</a>
  </footer>
</div>

<script server>
  async function handleLogin(formData, request) {
    const { username, password, remember } = formData;

    console.log('üîê Login attempt:', username);

    // Validate input
    if (!username || !password) {
      return {
        type: 'login',
        success: false,
        error: 'Username and password are required'
      };
    }

    // Simulate user database lookup (in production, query real database)
    const validUsers = {
      'admin': { id: 1, password: 'admin123', email: 'admin@example.com', role: 'admin' },
      'user': { id: 2, password: 'user123', email: 'user@example.com', role: 'user' },
      'testuser': { id: 3, password: 'test123', email: 'test@example.com', role: 'user' }
    };

    const user = validUsers[username.toLowerCase()];

    // Update session statistics
    if (!request.session) {
      request.session = {};
    }

    request.session.loginAttempts = (request.session.loginAttempts || 0) + 1;

    // Verify credentials
    if (!user || user.password !== password) {
      request.session.failedLogins = (request.session.failedLogins || 0) + 1;

      return {
        type: 'login',
        success: false,
        error: 'Invalid username or password'
      };
    }

    // Successful login - create session
    request.session.userId = user.id;
    request.session.username = username;
    request.session.email = user.email;
    request.session.role = user.role;
    request.session.loginTime = new Date().toISOString();
    request.session.successfulLogins = (request.session.successfulLogins || 0) + 1;
    request.session.rememberMe = remember === 'true';

    console.log('‚úÖ Login successful:', username);

    return {
      type: 'login',
      success: true,
      username: username,
      userId: user.id,
      role: user.role
    };
  }

  async function handleLogout(formData, request) {
    console.log('üö™ Logout request');

    // Clear session (preserve statistics for demo purposes)
    const stats = {
      loginAttempts: request.session?.loginAttempts || 0,
      successfulLogins: request.session?.successfulLogins || 0,
      failedLogins: request.session?.failedLogins || 0
    };

    // Clear user session
    if (request.session) {
      delete request.session.userId;
      delete request.session.username;
      delete request.session.email;
      delete request.session.role;
      delete request.session.loginTime;
      delete request.session.rememberMe;

      // Preserve stats
      request.session.loginAttempts = stats.loginAttempts;
      request.session.successfulLogins = stats.successfulLogins;
      request.session.failedLogins = stats.failedLogins;
    }

    console.log('‚úÖ Logout successful');

    return {
      type: 'logout',
      success: true
    };
  }

  async function handleRegister(formData, request) {
    const { username, email, password, confirmPassword } = formData;

    console.log('üìù Registration attempt:', username);

    // Validate input
    if (!username || !email || !password || !confirmPassword) {
      return {
        type: 'register',
        success: false,
        error: 'All fields are required'
      };
    }

    if (username.length < 3) {
      return {
        type: 'register',
        success: false,
        error: 'Username must be at least 3 characters'
      };
    }

    if (password.length < 6) {
      return {
        type: 'register',
        success: false,
        error: 'Password must be at least 6 characters'
      };
    }

    if (password !== confirmPassword) {
      return {
        type: 'register',
        success: false,
        error: 'Passwords do not match'
      };
    }

    // Check if email is valid
    if (!email.includes('@')) {
      return {
        type: 'register',
        success: false,
        error: 'Please enter a valid email address'
      };
    }

    // Simulate checking if user already exists (in production, query database)
    const existingUsers = ['admin', 'user', 'testuser'];
    if (existingUsers.includes(username.toLowerCase())) {
      return {
        type: 'register',
        success: false,
        error: 'Username already taken'
      };
    }

    // Successful registration (in production, save to database)
    console.log('‚úÖ Registration successful:', username);

    return {
      type: 'register',
      success: true,
      username: username,
      email: email,
      message: 'Account created successfully! You can now login.'
    };
  }
</script>

<style>
  .auth-test-suite {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  }

  .test-header {
    text-align: center;
    margin-bottom: 30px;
    padding: 40px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    color: white;
    position: relative;
  }

  .test-header h1 {
    margin: 0 0 10px 0;
    font-size: 2.5rem;
  }

  .subtitle {
    font-size: 1.1rem;
    opacity: 0.95;
    margin: 0;
  }

  .auth-status-badge {
    margin-top: 20px;
  }

  .badge {
    display: inline-block;
    padding: 8px 20px;
    border-radius: 20px;
    font-weight: 600;
    font-size: 0.95rem;
  }

  .badge.authenticated {
    background: rgba(40, 167, 69, 0.3);
    color: #d4edda;
    border: 2px solid #28a745;
  }

  .badge.unauthenticated {
    background: rgba(220, 53, 69, 0.3);
    color: #f8d7da;
    border: 2px solid #dc3545;
  }

  .action-message {
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 30px;
    font-weight: 500;
    border-left: 4px solid;
  }

  .action-message[data-type="success"] {
    background: #d4edda;
    color: #155724;
    border-color: #28a745;
  }

  .action-message[data-type="error"] {
    background: #f8d7da;
    color: #721c24;
    border-color: #dc3545;
  }

  .user-dashboard {
    background: white;
    padding: 30px;
    border-radius: 12px;
    margin-bottom: 40px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .user-dashboard h2 {
    margin-top: 0;
    color: #333;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .user-info-card,
  .session-info-card,
  .stats-card {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .user-info-card h3,
  .session-info-card h3,
  .stats-card h3 {
    margin-top: 0;
    color: #495057;
    font-size: 1.1rem;
  }

  .info-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .info-item {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background: white;
    border-radius: 6px;
  }

  .info-item strong {
    color: #6c757d;
  }

  .role-badge {
    padding: 4px 12px;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .role-badge[data-role="admin"] {
    background: #dc3545;
    color: white;
  }

  .role-badge[data-role="user"] {
    background: #007bff;
    color: white;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    margin-top: 15px;
  }

  .stat {
    text-align: center;
    padding: 15px;
    background: white;
    border-radius: 6px;
  }

  .stat-value {
    display: block;
    font-size: 1.8rem;
    font-weight: bold;
    color: #495057;
    margin-bottom: 5px;
  }

  .stat-value.success {
    color: #28a745;
  }

  .stat-value.error {
    color: #dc3545;
  }

  .stat-label {
    display: block;
    font-size: 0.85rem;
    color: #6c757d;
    text-transform: uppercase;
  }

  .logout-form {
    text-align: center;
    margin-top: 30px;
  }

  .logout-button {
    padding: 12px 40px;
    background: #dc3545;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s;
  }

  .logout-button:hover {
    background: #c82333;
  }

  .auth-forms {
    margin-bottom: 40px;
  }

  .forms-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 30px;
  }

  .form-card {
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .form-card h2 {
    margin-top: 0;
    color: #333;
  }

  .form-description {
    color: #6c757d;
    margin-bottom: 25px;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-group label {
    display: block;
    font-weight: 600;
    color: #495057;
    margin-bottom: 8px;
  }

  .form-group input {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ced4da;
    border-radius: 6px;
    font-size: 1rem;
    box-sizing: border-box;
  }

  .form-group input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .form-group.checkbox label {
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: normal;
  }

  .form-group.checkbox input {
    width: auto;
  }

  .submit-button {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .submit-button.login {
    background: #667eea;
    color: white;
  }

  .submit-button.login:hover {
    background: #5568d3;
  }

  .submit-button.register {
    background: #28a745;
    color: white;
  }

  .submit-button.register:hover {
    background: #218838;
  }

  .test-credentials {
    margin-top: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 6px;
    border-left: 4px solid #667eea;
  }

  .test-credentials p {
    margin: 5px 0;
    font-size: 0.9rem;
    color: #495057;
  }

  .test-credentials code {
    background: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.85rem;
    color: #667eea;
  }

  .test-scenarios {
    margin-bottom: 40px;
  }

  .test-scenarios h2 {
    color: #333;
    margin-bottom: 20px;
  }

  .scenarios-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
  }

  .scenario-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .scenario-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }

  .scenario-header h3 {
    margin: 0;
    font-size: 1.1rem;
    color: #333;
  }

  .scenario-badge {
    padding: 4px 10px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .scenario-badge[data-status="completed"] {
    background: #28a745;
    color: white;
  }

  .scenario-badge[data-status="active"] {
    background: #007bff;
    color: white;
  }

  .scenario-badge[data-status="available"] {
    background: #6c757d;
    color: white;
  }

  .scenario-badge[data-status="pending"] {
    background: #ffc107;
    color: #333;
  }

  .scenario-description {
    color: #6c757d;
    margin-bottom: 15px;
  }

  .status-icon {
    font-size: 0.9rem;
    font-weight: 600;
  }

  .status-icon.tested {
    color: #28a745;
  }

  .status-icon.pending {
    color: #ffc107;
  }

  .security-features {
    background: #f8f9fa;
    padding: 30px;
    border-radius: 12px;
    margin-bottom: 40px;
  }

  .security-features h2 {
    margin-top: 0;
    color: #333;
  }

  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }

  .feature-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .feature-card h3 {
    margin-top: 0;
    color: #495057;
  }

  .feature-card ul {
    margin: 15px 0 0 0;
    padding-left: 20px;
  }

  .feature-card li {
    margin-bottom: 8px;
    color: #6c757d;
  }

  .protected-routes {
    background: white;
    padding: 30px;
    border-radius: 12px;
    margin-bottom: 40px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }

  .protected-routes h2 {
    margin-top: 0;
    color: #333;
  }

  .routes-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
  }

  .route-item {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 6px;
    border-left: 4px solid #667eea;
  }

  .route-item code {
    flex: 1;
    font-size: 0.95rem;
    color: #495057;
  }

  .route-item .badge {
    padding: 4px 12px;
    font-size: 0.75rem;
  }

  .access-link {
    color: #667eea;
    text-decoration: none;
    font-weight: 600;
  }

  .access-link:hover {
    text-decoration: underline;
  }

  .access-denied {
    color: #dc3545;
    font-weight: 600;
    font-size: 0.9rem;
  }

  .test-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background: white;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .test-footer a {
    color: #667eea;
    text-decoration: none;
    font-weight: 600;
  }

  .test-footer a:hover {
    text-decoration: underline;
  }
</style>

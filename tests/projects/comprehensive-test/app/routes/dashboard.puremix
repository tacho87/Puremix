<layout>main</layout>

<imports>
  import UserCard from '../components/UserCard.puremix'
</imports>

<head>
  <title>Dashboard - Component Selective Update Demo</title>
  <meta name="description" content="Demonstrating component selective updates and auto-mapping">
</head>

<loader>
  async function loadDashboard(request, actionResult) {
    // Simulate dashboard data loading
    const users = [
      { 
        id: 1, 
        name: 'Alice Johnson', 
        email: 'alice@example.com', 
        department: 'Engineering',
        role: 'Senior Developer'
      },
      { 
        id: 2, 
        name: 'Bob Smith', 
        email: 'bob@example.com', 
        department: 'Design', 
        role: 'UI/UX Designer'
      },
      { 
        id: 3, 
        name: 'Charlie Davis', 
        email: 'charlie@example.com', 
        department: 'Marketing', 
        role: 'Product Manager'
      },
      { 
        id: 4, 
        name: 'Diana Wilson', 
        email: 'diana@example.com', 
        department: 'Sales', 
        role: 'Account Executive'
      }
    ];
    
    const metrics = {
      totalUsers: users.length,
      activeUsers: users.filter(u => u.department !== 'Marketing').length,
      lastUpdate: new Date().toLocaleTimeString(),
      systemStatus: 'operational'
    };
    
    // Handle action results for dashboard-level updates
    if (actionResult?.dashboardRefreshed) {
      metrics.lastRefresh = new Date().toLocaleTimeString();
      metrics.refreshCount = (actionResult.refreshCount || 0) + 1;
    }
    
    return {
      data: { 
        users, 
        metrics,
        pageTitle: 'Enhanced Dashboard Demo'
      },
      state: { 
        showControls: true,
        canRefresh: true
      }
    };
  }
</loader>

<div class="dashboard-container">
  <header class="dashboard-header">
    <h1>🚀 {loadDashboard.data.pageTitle}</h1>
    <p class="subtitle">Testing component selective updates and enhanced auto-mapping</p>
    
    <!-- Dashboard-level metrics -->
    <div class="metrics-bar">
      <div class="metric">
        <span class="metric-label">Total Users:</span>
        <span class="metric-value">{loadDashboard.data.metrics.totalUsers}</span>
      </div>
      <div class="metric">
        <span class="metric-label">Active:</span>
        <span class="metric-value">{loadDashboard.data.metrics.activeUsers}</span>
      </div>
      <div class="metric">
        <span class="metric-label">Status:</span>
        <span class="metric-value status-{loadDashboard.data.metrics.systemStatus}">{loadDashboard.data.metrics.systemStatus}</span>
      </div>
      <div class="metric">
        <span class="metric-label">Last Update:</span>
        <span class="metric-value">{loadDashboard.data.metrics.lastUpdate}</span>
      </div>
      {loadDashboard.data.metrics.lastRefresh ? 
        <div class="metric">
          <span class="metric-label">Dashboard Refreshed:</span>
          <span class="metric-value">{loadDashboard.data.metrics.lastRefresh} ({loadDashboard.data.metrics.refreshCount} times)</span>
        </div>
      : <span></span>}
    </div>
  </header>

  <!-- Component testing controls -->
  {loadDashboard.state.showControls ? 
    <div class="control-panel">
      <h2>🎮 Component Testing Controls</h2>
      <p>Use these controls to test selective component updates vs full page updates:</p>
      
      <div class="control-groups">
        <!-- Individual Component Controls -->
        <div class="control-group">
          <h3>🧩 Individual Component Updates</h3>
          <div class="button-row">
            <!-- Auto-mapping patterns (NEW) -->
            <button onclick="refreshProfile">🔄 Refresh Profile (Direct)</button>
            <button onclick="updateStatus({status: 'testing'})">📊 Update Status (With Data)</button>
            
            <!-- Traditional patterns (still work) -->
            <button onclick="PureMix.call('UserCard.toggleActive', {})">🔄 Toggle Active (Traditional)</button>
          </div>
          <p class="note">These update only ONE UserCard component, leaving others unchanged</p>
        </div>
        
        <!-- Page-level Controls -->
        <div class="control-group">
          <h3>📄 Page-level Updates</h3>
          <div class="button-row">
            <!-- Page-level auto-mapping -->
            <button onclick="refreshDashboard">🔄 Refresh Dashboard (Direct)</button>
            <button onclick="refreshDashboard()">🔄 Refresh Dashboard (Parentheses)</button>
            
            <!-- With data -->
            <button onclick="refreshDashboard({source: 'manual'})">🔄 Refresh with Data</button>
            
            <!-- Traditional -->
            <button onclick="PureMix.call('refreshDashboard', {source: 'traditional'})">🔄 Traditional Refresh</button>
          </div>
          <p class="note">These update the entire page following full action→loader→template flow</p>
        </div>
        
        <!-- Form Testing -->
        <div class="control-group">
          <h3>📝 Form Auto-Extraction Testing</h3>
          <form onsubmit="updateDashboardSettings" class="inline-form">
            <input name="refreshInterval" type="number" value="5" placeholder="Refresh interval (seconds)">
            <input name="displayMode" value="grid" placeholder="Display mode">
            <button type="submit">💾 Update Settings (Auto Form Data)</button>
          </form>
          <p class="note">Form data is automatically extracted and passed to server function</p>
        </div>
        
        <!-- Dynamic Data Testing -->
        <div class="control-group">
          <h3>⚡ Dynamic Client Data Testing</h3>
          <input id="dynamic-test-input" placeholder="Type something for dynamic testing">
          <button onclick="sendDynamicData()">🚀 Send Dynamic Data</button>
          <p class="note">Combines real-time client variables with server function calls</p>
        </div>
      </div>
      
      <!-- Test Results Display -->
      <div class="test-results" id="dashboard-test-results" style="display: none;">
        <h3>📊 Test Results</h3>
        <div id="dashboard-test-log" class="test-log"></div>
        <button onclick="clearTestResults()">🗑️ Clear Results</button>
      </div>
    </div>
  : <span></span>}

  <!-- User Cards Grid (Components) -->
  <div class="dashboard-content">
    <h2>👥 Team Members</h2>
    <div class="user-cards-grid">
      <!-- PureMix components are self-contained - no props needed -->
      <UserCard />
      <UserCard />
      <UserCard />
      <UserCard />
    </div>
    
    <!-- Additional testing components could go here -->
    <div class="additional-components">
      <h3>🔧 Additional Component Tests</h3>
      <p>Each component below should update independently:</p>
      
      <!-- More UserCard instances (PureMix components are self-contained) -->
      <UserCard />
      <UserCard />
    </div>
  </div>
</div>

<script server>
  // ==================== DASHBOARD-LEVEL SERVER FUNCTIONS ====================
  
  async function refreshDashboard(formData, request) {
    // Dashboard-level refresh (full page update)
    console.log('🔄 Dashboard refresh called with:', formData);
    
    return {
      success: true,
      dashboardRefreshed: true,
      refreshCount: (formData.refreshCount || 0) + 1,
      message: 'Dashboard refreshed successfully',
      source: formData.source || 'auto',
      timestamp: new Date().toISOString()
    };
  }
  
  async function updateDashboardSettings(formData, request) {
    // Form submission with auto data extraction
    console.log('💾 Dashboard settings update with form data:', formData);
    
    const { refreshInterval, displayMode } = formData;
    
    return {
      success: true,
      message: 'Dashboard settings updated',
      settings: {
        refreshInterval: parseInt(refreshInterval) || 5,
        displayMode: displayMode || 'grid'
      },
      timestamp: new Date().toISOString()
    };
  }
  
  async function sendDynamicData(formData, request) {
    // Handle dynamic client-side data
    console.log('⚡ Dynamic data received:', formData);
    
    return {
      success: true,
      message: 'Dynamic data processed successfully',
      processedData: {
        clientTimestamp: formData.clientTimestamp,
        userInput: formData.userInput,
        performanceData: formData.performance,
        clientState: formData.clientState
      },
      serverTimestamp: new Date().toISOString()
    };
  }
</script>

<script client>
  // ==================== ENHANCED CLIENT-SIDE FUNCTIONALITY ====================
  
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Enhanced Dashboard initialized');
    
    // Initialize component update tracking
    if (window.PureMix) {
      window.PureMix.on('componentUpdated', function(data) {
        logTestResult(`Component Updated: ${data.name}#${data.id.substr(-6)}`, {
          success: true,
          component: data.name,
          changed: data.changed,
          renderTime: data.renderTime || 'N/A'
        });
      });
      
      window.PureMix.on('componentAction', function(data) {
        logTestResult(`Component Action: ${data.component}.${data.action}`, {
          success: true,
          component: data.component,
          action: data.action,
          renderTime: data.response?.renderTime || 'N/A'
        });
      });
    }
  });
  
  // ==================== DYNAMIC DATA FUNCTIONS ====================
  
  async function sendDynamicData() {
    const input = document.getElementById('dynamic-test-input');
    
    const dynamicData = {
      clientTimestamp: Date.now(),
      userInput: input.value || 'No input provided',
      performance: {
        loadTime: performance.now(),
        memoryUsage: performance.memory?.usedJSHeapSize || 0
      },
      clientState: {
        windowSize: { width: window.innerWidth, height: window.innerHeight },
        userAgent: navigator.userAgent.substring(0, 50),
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
      },
      randomData: {
        number: Math.random(),
        string: Math.random().toString(36).substring(2, 15)
      }
    };
    
    try {
      const result = await PureMix.call('sendDynamicData', dynamicData);
      logTestResult('Dynamic Data Sent', result);
      
      // Clear input after successful send
      if (result.success) {
        input.value = '';
      }
    } catch (error) {
      logTestResult('Dynamic Data Error', { success: false, error: error.message });
    }
  }
  
  // ==================== TEST RESULT LOGGING ====================
  
  function logTestResult(testName, result) {
    const testResults = document.getElementById('dashboard-test-results');
    const testLog = document.getElementById('dashboard-test-log');
    
    testResults.style.display = 'block';
    
    const timestamp = new Date().toLocaleTimeString();
    const resultElement = document.createElement('div');
    resultElement.className = 'test-result-entry';
    resultElement.innerHTML = `
      <div class="result-header">
        <span class="test-name">[${timestamp}] ${testName}</span>
        <span class="result-status ${result.success ? 'success' : 'error'}">
          ${result.success ? '✅' : '❌'}
        </span>
      </div>
      <div class="result-details">
        ${result.renderTime ? `<div>Render Time: ${result.renderTime}ms</div>` : ''}
        ${result.message ? `<div>Message: ${result.message}</div>` : ''}
        ${result.component ? `<div>Component: ${result.component}</div>` : ''}
        ${result.error ? `<div>Error: ${result.error}</div>` : ''}
      </div>
    `;
    
    testLog.insertBefore(resultElement, testLog.firstChild);
    
    // Keep only last 10 results
    while (testLog.children.length > 10) {
      testLog.removeChild(testLog.lastChild);
    }
    
    console.log(`📊 ${testName}:`, result);
  }
  
  function clearTestResults() {
    const testLog = document.getElementById('dashboard-test-log');
    const testResults = document.getElementById('dashboard-test-results');
    
    testLog.innerHTML = '';
    testResults.style.display = 'none';
    
    console.log('🗑️ Test results cleared');
  }
</script>

<style>
  .dashboard-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
  }
  
  .dashboard-header {
    text-align: center;
    margin-bottom: 30px;
    padding: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 12px;
  }
  
  .subtitle {
    margin: 10px 0 20px 0;
    font-size: 1.1rem;
    opacity: 0.9;
  }
  
  .metrics-bar {
    display: flex;
    justify-content: center;
    gap: 20px;
    flex-wrap: wrap;
    margin-top: 20px;
  }
  
  .metric {
    background: rgba(255, 255, 255, 0.2);
    padding: 8px 16px;
    border-radius: 20px;
    backdrop-filter: blur(10px);
  }
  
  .metric-label {
    font-weight: 500;
    margin-right: 6px;
  }
  
  .metric-value {
    font-weight: bold;
  }
  
  .status-operational { color: #22c55e; }
  .status-warning { color: #f59e0b; }
  .status-error { color: #ef4444; }
  
  .control-panel {
    background: #f8fafc;
    border-radius: 12px;
    padding: 25px;
    margin: 25px 0;
    border: 1px solid #e2e8f0;
  }
  
  .control-groups {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 20px;
    margin: 20px 0;
  }
  
  .control-group {
    background: white;
    border-radius: 8px;
    padding: 20px;
    border: 1px solid #e5e7eb;
  }
  
  .control-group h3 {
    margin: 0 0 15px 0;
    color: #374151;
    border-bottom: 2px solid #f3f4f6;
    padding-bottom: 8px;
  }
  
  .button-row {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    margin: 15px 0;
  }
  
  button {
    background: #007bff;
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.3s ease;
    min-width: 140px;
  }
  
  button:hover:not(:disabled) {
    background: #0056b3;
    transform: translateY(-1px);
  }
  
  button:disabled {
    background: #6c757d;
    cursor: not-allowed;
    transform: none;
  }
  
  .note {
    color: #6b7280;
    font-style: italic;
    font-size: 13px;
    margin-top: 8px;
  }
  
  .inline-form {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    align-items: center;
    margin: 15px 0;
  }
  
  .inline-form input {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    font-size: 14px;
  }
  
  .dashboard-content {
    margin: 30px 0;
  }
  
  .user-cards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin: 20px 0;
  }
  
  .additional-components {
    margin-top: 40px;
    padding: 20px;
    background: #fef7ff;
    border-radius: 8px;
    border-left: 4px solid #a855f7;
  }
  
  .test-results {
    background: #1e293b;
    color: white;
    border-radius: 8px;
    padding: 20px;
    margin: 20px 0;
  }
  
  .test-log {
    background: #0f172a;
    padding: 15px;
    border-radius: 6px;
    max-height: 300px;
    overflow-y: auto;
    margin: 15px 0;
  }
  
  .test-result-entry {
    margin: 8px 0;
    padding: 8px 12px;
    background: #334155;
    border-radius: 4px;
    border-left: 3px solid #3b82f6;
  }
  
  .result-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 6px;
  }
  
  .test-name {
    font-weight: 500;
  }
  
  .result-status.success { color: #22c55e; }
  .result-status.error { color: #ef4444; }
  
  .result-details {
    font-size: 12px;
    color: #cbd5e1;
    line-height: 1.4;
  }
  
  .result-details div {
    margin: 2px 0;
  }
</style>